/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ModelTypeRelationsBroadcasts from './ModelTypeRelationsBroadcasts';
import ModelTypeRelationsCampaigns from './ModelTypeRelationsCampaigns';
import ModelTypeRelationsContacts from './ModelTypeRelationsContacts';
import ModelTypeRelationsItems from './ModelTypeRelationsItems';
import ModelTypeRelationsPresenters from './ModelTypeRelationsPresenters';
import ModelTypeRelationsPrograms from './ModelTypeRelationsPrograms';

/**
 * The ModelTypeRelations model module.
 * @module models/ModelTypeRelations
 * @version 2.0
 */
class ModelTypeRelations {
    /**
     * Constructs a new <code>ModelTypeRelations</code>.
     * @alias module:models/ModelTypeRelations
     */
    constructor() { 
        
        ModelTypeRelations.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelTypeRelations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/ModelTypeRelations} obj Optional instance to populate.
     * @return {module:models/ModelTypeRelations} The populated <code>ModelTypeRelations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelTypeRelations();

            if (data.hasOwnProperty('campaigns')) {
                obj['campaigns'] = ModelTypeRelationsCampaigns.constructFromObject(data['campaigns']);
            }
            if (data.hasOwnProperty('broadcasts')) {
                obj['broadcasts'] = ModelTypeRelationsBroadcasts.constructFromObject(data['broadcasts']);
            }
            if (data.hasOwnProperty('programs')) {
                obj['programs'] = ModelTypeRelationsPrograms.constructFromObject(data['programs']);
            }
            if (data.hasOwnProperty('contacts')) {
                obj['contacts'] = ModelTypeRelationsContacts.constructFromObject(data['contacts']);
            }
            if (data.hasOwnProperty('presenters')) {
                obj['presenters'] = ModelTypeRelationsPresenters.constructFromObject(data['presenters']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ModelTypeRelationsItems.constructFromObject(data['items']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelTypeRelations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelTypeRelations</code>.
     */
    static validateJSON(data) {
        // validate the optional field `campaigns`
        if (data['campaigns']) { // data not null
          ModelTypeRelationsCampaigns.validateJSON(data['campaigns']);
        }
        // validate the optional field `broadcasts`
        if (data['broadcasts']) { // data not null
          ModelTypeRelationsBroadcasts.validateJSON(data['broadcasts']);
        }
        // validate the optional field `programs`
        if (data['programs']) { // data not null
          ModelTypeRelationsPrograms.validateJSON(data['programs']);
        }
        // validate the optional field `contacts`
        if (data['contacts']) { // data not null
          ModelTypeRelationsContacts.validateJSON(data['contacts']);
        }
        // validate the optional field `presenters`
        if (data['presenters']) { // data not null
          ModelTypeRelationsPresenters.validateJSON(data['presenters']);
        }
        // validate the optional field `items`
        if (data['items']) { // data not null
          ModelTypeRelationsItems.validateJSON(data['items']);
        }

        return true;
    }

/**
     * @return {module:models/ModelTypeRelationsCampaigns}
     */
    getCampaigns() {
        return this.campaigns;
    }

    /**
     * @param {module:models/ModelTypeRelationsCampaigns} campaigns
     */
    setCampaigns(campaigns) {
        this['campaigns'] = campaigns;
    }
/**
     * @return {module:models/ModelTypeRelationsBroadcasts}
     */
    getBroadcasts() {
        return this.broadcasts;
    }

    /**
     * @param {module:models/ModelTypeRelationsBroadcasts} broadcasts
     */
    setBroadcasts(broadcasts) {
        this['broadcasts'] = broadcasts;
    }
/**
     * @return {module:models/ModelTypeRelationsPrograms}
     */
    getPrograms() {
        return this.programs;
    }

    /**
     * @param {module:models/ModelTypeRelationsPrograms} programs
     */
    setPrograms(programs) {
        this['programs'] = programs;
    }
/**
     * @return {module:models/ModelTypeRelationsContacts}
     */
    getContacts() {
        return this.contacts;
    }

    /**
     * @param {module:models/ModelTypeRelationsContacts} contacts
     */
    setContacts(contacts) {
        this['contacts'] = contacts;
    }
/**
     * @return {module:models/ModelTypeRelationsPresenters}
     */
    getPresenters() {
        return this.presenters;
    }

    /**
     * @param {module:models/ModelTypeRelationsPresenters} presenters
     */
    setPresenters(presenters) {
        this['presenters'] = presenters;
    }
/**
     * @return {module:models/ModelTypeRelationsItems}
     */
    getItems() {
        return this.items;
    }

    /**
     * @param {module:models/ModelTypeRelationsItems} items
     */
    setItems(items) {
        this['items'] = items;
    }

}



/**
 * @member {module:models/ModelTypeRelationsCampaigns} campaigns
 */
ModelTypeRelations.prototype['campaigns'] = undefined;

/**
 * @member {module:models/ModelTypeRelationsBroadcasts} broadcasts
 */
ModelTypeRelations.prototype['broadcasts'] = undefined;

/**
 * @member {module:models/ModelTypeRelationsPrograms} programs
 */
ModelTypeRelations.prototype['programs'] = undefined;

/**
 * @member {module:models/ModelTypeRelationsContacts} contacts
 */
ModelTypeRelations.prototype['contacts'] = undefined;

/**
 * @member {module:models/ModelTypeRelationsPresenters} presenters
 */
ModelTypeRelations.prototype['presenters'] = undefined;

/**
 * @member {module:models/ModelTypeRelationsItems} items
 */
ModelTypeRelations.prototype['items'] = undefined;






export default ModelTypeRelations;

