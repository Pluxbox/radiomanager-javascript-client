/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BroadcastEPGResult from './BroadcastEPGResult';

/**
 * The BroadcastEPGDay model module.
 * @module models/BroadcastEPGDay
 * @version 2.0
 */
class BroadcastEPGDay {
    /**
     * Constructs a new <code>BroadcastEPGDay</code>.
     * @alias module:models/BroadcastEPGDay
     * @param results {Array.<module:models/BroadcastEPGResult>} 
     */
    constructor(results) { 
        
        BroadcastEPGDay.initialize(this, results);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, results) { 
        obj['results'] = results;
    }

    /**
     * Constructs a <code>BroadcastEPGDay</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/BroadcastEPGDay} obj Optional instance to populate.
     * @return {module:models/BroadcastEPGDay} The populated <code>BroadcastEPGDay</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BroadcastEPGDay();

            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'Date');
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [BroadcastEPGResult]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BroadcastEPGDay</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BroadcastEPGDay</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BroadcastEPGDay.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                BroadcastEPGResult.validateJsonObject(item);
            };
        }

        return true;
    }

/**
     * @return {Date}
     */
    getDay() {
        return this.day;
    }

    /**
     * @param {Date} day
     */
    setDay(day) {
        this['day'] = day;
    }
/**
     * @return {Array.<module:models/BroadcastEPGResult>}
     */
    getResults() {
        return this.results;
    }

    /**
     * @param {Array.<module:models/BroadcastEPGResult>} results
     */
    setResults(results) {
        this['results'] = results;
    }

}

BroadcastEPGDay.RequiredProperties = ["results"];

/**
 * @member {Date} day
 */
BroadcastEPGDay.prototype['day'] = undefined;

/**
 * @member {Array.<module:models/BroadcastEPGResult>} results
 */
BroadcastEPGDay.prototype['results'] = undefined;






export default BroadcastEPGDay;

