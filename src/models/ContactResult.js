/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BroadcastRelationsModelType from './BroadcastRelationsModelType';
import Contact from './Contact';
import ContactOutputOnly from './ContactOutputOnly';
import ContactRelations from './ContactRelations';
import ContactRelationsItems from './ContactRelationsItems';
import ContactRelationsTags from './ContactRelationsTags';

/**
 * The ContactResult model module.
 * @module models/ContactResult
 * @version 2.0
 */
class ContactResult {
    /**
     * Constructs a new <code>ContactResult</code>.
     * @alias module:models/ContactResult
     * @implements module:models/ContactOutputOnly
     * @implements module:models/Contact
     * @implements module:models/ContactRelations
     * @param modelTypeId {Number} 
     * @param firstname {String} 
     * @param lastname {String} 
     * @param tags {module:models/ContactRelationsTags} 
     */
    constructor(modelTypeId, firstname, lastname, tags) { 
        ContactOutputOnly.initialize(this);Contact.initialize(this, modelTypeId, firstname, lastname);ContactRelations.initialize(this, tags);
        ContactResult.initialize(this, modelTypeId, firstname, lastname, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelTypeId, firstname, lastname, tags) { 
        obj['model_type_id'] = modelTypeId;
        obj['firstname'] = firstname;
        obj['lastname'] = lastname;
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>ContactResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/ContactResult} obj Optional instance to populate.
     * @return {module:models/ContactResult} The populated <code>ContactResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactResult();
            ContactOutputOnly.constructFromObject(data, obj);
            Contact.constructFromObject(data, obj);
            ContactRelations.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('_external_station_id')) {
                obj['_external_station_id'] = ApiClient.convertToType(data['_external_station_id'], 'Number');
            }
            if (data.hasOwnProperty('model_type_id')) {
                obj['model_type_id'] = ApiClient.convertToType(data['model_type_id'], 'Number');
            }
            if (data.hasOwnProperty('field_values')) {
                obj['field_values'] = ApiClient.convertToType(data['field_values'], Object);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ContactRelationsTags.constructFromObject(data['tags']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ContactRelationsItems.constructFromObject(data['items']);
            }
            if (data.hasOwnProperty('model_type')) {
                obj['model_type'] = BroadcastRelationsModelType.constructFromObject(data['model_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContactResult.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          ContactRelationsTags.validateJSON(data['tags']);
        }
        // validate the optional field `items`
        if (data['items']) { // data not null
          ContactRelationsItems.validateJSON(data['items']);
        }
        // validate the optional field `model_type`
        if (data['model_type']) { // data not null
          BroadcastRelationsModelType.validateJSON(data['model_type']);
        }

        return true;
    }

/**
     * @return {Number}
     */
    getId() {
        return this.id;
    }

    /**
     * @param {Number} id
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * @return {Date}
     */
    getCreatedAt() {
        return this.created_at;
    }

    /**
     * @param {Date} createdAt
     */
    setCreatedAt(createdAt) {
        this['created_at'] = createdAt;
    }
/**
     * @return {Date}
     */
    getUpdatedAt() {
        return this.updated_at;
    }

    /**
     * @param {Date} updatedAt
     */
    setUpdatedAt(updatedAt) {
        this['updated_at'] = updatedAt;
    }
/**
     * @return {Date}
     */
    getDeletedAt() {
        return this.deleted_at;
    }

    /**
     * @param {Date} deletedAt
     */
    setDeletedAt(deletedAt) {
        this['deleted_at'] = deletedAt;
    }
/**
     * @return {Number}
     */
    getExternalStationId() {
        return this._external_station_id;
    }

    /**
     * @param {Number} externalStationId
     */
    setExternalStationId(externalStationId) {
        this['_external_station_id'] = externalStationId;
    }
/**
     * @return {Number}
     */
    getModelTypeId() {
        return this.model_type_id;
    }

    /**
     * @param {Number} modelTypeId
     */
    setModelTypeId(modelTypeId) {
        this['model_type_id'] = modelTypeId;
    }
/**
     * @return {Object}
     */
    getFieldValues() {
        return this.field_values;
    }

    /**
     * @param {Object} fieldValues
     */
    setFieldValues(fieldValues) {
        this['field_values'] = fieldValues;
    }
/**
     * @return {String}
     */
    getEmail() {
        return this.email;
    }

    /**
     * @param {String} email
     */
    setEmail(email) {
        this['email'] = email;
    }
/**
     * @return {String}
     */
    getFirstname() {
        return this.firstname;
    }

    /**
     * @param {String} firstname
     */
    setFirstname(firstname) {
        this['firstname'] = firstname;
    }
/**
     * @return {String}
     */
    getLastname() {
        return this.lastname;
    }

    /**
     * @param {String} lastname
     */
    setLastname(lastname) {
        this['lastname'] = lastname;
    }
/**
     * @return {String}
     */
    getPhone() {
        return this.phone;
    }

    /**
     * @param {String} phone
     */
    setPhone(phone) {
        this['phone'] = phone;
    }
/**
     * @return {module:models/ContactRelationsTags}
     */
    getTags() {
        return this.tags;
    }

    /**
     * @param {module:models/ContactRelationsTags} tags
     */
    setTags(tags) {
        this['tags'] = tags;
    }
/**
     * @return {module:models/ContactRelationsItems}
     */
    getItems() {
        return this.items;
    }

    /**
     * @param {module:models/ContactRelationsItems} items
     */
    setItems(items) {
        this['items'] = items;
    }
/**
     * @return {module:models/BroadcastRelationsModelType}
     */
    getModelType() {
        return this.model_type;
    }

    /**
     * @param {module:models/BroadcastRelationsModelType} modelType
     */
    setModelType(modelType) {
        this['model_type'] = modelType;
    }

}

ContactResult.RequiredProperties = ["model_type_id", "firstname", "lastname", "tags"];

/**
 * @member {Number} id
 */
ContactResult.prototype['id'] = undefined;

/**
 * @member {Date} created_at
 */
ContactResult.prototype['created_at'] = undefined;

/**
 * @member {Date} updated_at
 */
ContactResult.prototype['updated_at'] = undefined;

/**
 * @member {Date} deleted_at
 */
ContactResult.prototype['deleted_at'] = undefined;

/**
 * @member {Number} _external_station_id
 */
ContactResult.prototype['_external_station_id'] = undefined;

/**
 * @member {Number} model_type_id
 */
ContactResult.prototype['model_type_id'] = undefined;

/**
 * @member {Object} field_values
 */
ContactResult.prototype['field_values'] = undefined;

/**
 * @member {String} email
 */
ContactResult.prototype['email'] = undefined;

/**
 * @member {String} firstname
 */
ContactResult.prototype['firstname'] = undefined;

/**
 * @member {String} lastname
 */
ContactResult.prototype['lastname'] = undefined;

/**
 * @member {String} phone
 */
ContactResult.prototype['phone'] = undefined;

/**
 * @member {module:models/ContactRelationsTags} tags
 */
ContactResult.prototype['tags'] = undefined;

/**
 * @member {module:models/ContactRelationsItems} items
 */
ContactResult.prototype['items'] = undefined;

/**
 * @member {module:models/BroadcastRelationsModelType} model_type
 */
ContactResult.prototype['model_type'] = undefined;


// Implement ContactOutputOnly interface:
/**
 * @member {Number} id
 */
ContactOutputOnly.prototype['id'] = undefined;
/**
 * @member {Date} created_at
 */
ContactOutputOnly.prototype['created_at'] = undefined;
/**
 * @member {Date} updated_at
 */
ContactOutputOnly.prototype['updated_at'] = undefined;
/**
 * @member {Date} deleted_at
 */
ContactOutputOnly.prototype['deleted_at'] = undefined;
/**
 * @member {Number} _external_station_id
 */
ContactOutputOnly.prototype['_external_station_id'] = undefined;
// Implement Contact interface:
/**
 * @member {Number} model_type_id
 */
Contact.prototype['model_type_id'] = undefined;
/**
 * @member {Object} field_values
 */
Contact.prototype['field_values'] = undefined;
/**
 * @member {String} email
 */
Contact.prototype['email'] = undefined;
/**
 * @member {String} firstname
 */
Contact.prototype['firstname'] = undefined;
/**
 * @member {String} lastname
 */
Contact.prototype['lastname'] = undefined;
/**
 * @member {String} phone
 */
Contact.prototype['phone'] = undefined;
// Implement ContactRelations interface:
/**
 * @member {module:models/ContactRelationsTags} tags
 */
ContactRelations.prototype['tags'] = undefined;
/**
 * @member {module:models/ContactRelationsItems} items
 */
ContactRelations.prototype['items'] = undefined;
/**
 * @member {module:models/BroadcastRelationsModelType} model_type
 */
ContactRelations.prototype['model_type'] = undefined;




export default ContactResult;

