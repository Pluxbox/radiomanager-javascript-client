/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BroadcastInputOnly model module.
 * @module models/BroadcastInputOnly
 * @version 2.0
 */
class BroadcastInputOnly {
    /**
     * Constructs a new <code>BroadcastInputOnly</code>.
     * @alias module:models/BroadcastInputOnly
     */
    constructor() { 
        
        BroadcastInputOnly.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BroadcastInputOnly</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/BroadcastInputOnly} obj Optional instance to populate.
     * @return {module:models/BroadcastInputOnly} The populated <code>BroadcastInputOnly</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BroadcastInputOnly();

            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['Number']);
            }
            if (data.hasOwnProperty('presenters')) {
                obj['presenters'] = ApiClient.convertToType(data['presenters'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BroadcastInputOnly</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BroadcastInputOnly</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['presenters'])) {
            throw new Error("Expected the field `presenters` to be an array in the JSON data but got " + data['presenters']);
        }

        return true;
    }

/**
     * @return {Array.<Number>}
     */
    getTags() {
        return this.tags;
    }

    /**
     * @param {Array.<Number>} tags
     */
    setTags(tags) {
        this['tags'] = tags;
    }
/**
     * @return {Array.<Number>}
     */
    getPresenters() {
        return this.presenters;
    }

    /**
     * @param {Array.<Number>} presenters
     */
    setPresenters(presenters) {
        this['presenters'] = presenters;
    }

}



/**
 * @member {Array.<Number>} tags
 */
BroadcastInputOnly.prototype['tags'] = undefined;

/**
 * @member {Array.<Number>} presenters
 */
BroadcastInputOnly.prototype['presenters'] = undefined;






export default BroadcastInputOnly;

