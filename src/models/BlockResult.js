/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Block from './Block';
import BlockRelations from './BlockRelations';
import BlockRelationsBroadcast from './BlockRelationsBroadcast';
import BlockRelationsItems from './BlockRelationsItems';
import BlockRelationsProgram from './BlockRelationsProgram';

/**
 * The BlockResult model module.
 * @module models/BlockResult
 * @version 2.0
 */
class BlockResult {
    /**
     * Constructs a new <code>BlockResult</code>.
     * @alias module:models/BlockResult
     * @implements module:models/Block
     * @implements module:models/BlockRelations
     * @param id {Number} ID of the current Block.
     * @param broadcastId {Number} Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID.
     * @param start {Date} Start of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @param stop {Date} End of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @param createdAt {Date} Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @param updatedAt {Date} Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @param deletedAt {Date} Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone.
     */
    constructor(id, broadcastId, start, stop, createdAt, updatedAt, deletedAt) { 
        Block.initialize(this, id, broadcastId, start, stop, createdAt, updatedAt, deletedAt);BlockRelations.initialize(this);
        BlockResult.initialize(this, id, broadcastId, start, stop, createdAt, updatedAt, deletedAt);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, broadcastId, start, stop, createdAt, updatedAt, deletedAt) { 
        obj['id'] = id;
        obj['broadcast_id'] = broadcastId;
        obj['start'] = start;
        obj['stop'] = stop;
        obj['created_at'] = createdAt;
        obj['updated_at'] = updatedAt;
        obj['deleted_at'] = deletedAt;
    }

    /**
     * Constructs a <code>BlockResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/BlockResult} obj Optional instance to populate.
     * @return {module:models/BlockResult} The populated <code>BlockResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlockResult();
            Block.constructFromObject(data, obj);
            BlockRelations.constructFromObject(data, obj);

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('broadcast_id')) {
                obj['broadcast_id'] = ApiClient.convertToType(data['broadcast_id'], 'Number');
            }
            if (data.hasOwnProperty('start')) {
                obj['start'] = ApiClient.convertToType(data['start'], 'Date');
            }
            if (data.hasOwnProperty('stop')) {
                obj['stop'] = ApiClient.convertToType(data['stop'], 'Date');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'Date');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'Date');
            }
            if (data.hasOwnProperty('deleted_at')) {
                obj['deleted_at'] = ApiClient.convertToType(data['deleted_at'], 'Date');
            }
            if (data.hasOwnProperty('_external_station_id')) {
                obj['_external_station_id'] = ApiClient.convertToType(data['_external_station_id'], 'Number');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = BlockRelationsItems.constructFromObject(data['items']);
            }
            if (data.hasOwnProperty('broadcast')) {
                obj['broadcast'] = BlockRelationsBroadcast.constructFromObject(data['broadcast']);
            }
            if (data.hasOwnProperty('program')) {
                obj['program'] = BlockRelationsProgram.constructFromObject(data['program']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlockResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlockResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlockResult.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `items`
        if (data['items']) { // data not null
          BlockRelationsItems.validateJSON(data['items']);
        }
        // validate the optional field `broadcast`
        if (data['broadcast']) { // data not null
          BlockRelationsBroadcast.validateJSON(data['broadcast']);
        }
        // validate the optional field `program`
        if (data['program']) { // data not null
          BlockRelationsProgram.validateJSON(data['program']);
        }

        return true;
    }

/**
     * Returns ID of the current Block.
     * @return {Number}
     */
    getId() {
        return this.id;
    }

    /**
     * Sets ID of the current Block.
     * @param {Number} id ID of the current Block.
     */
    setId(id) {
        this['id'] = id;
    }
/**
     * Returns Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID.
     * @return {Number}
     */
    getBroadcastId() {
        return this.broadcast_id;
    }

    /**
     * Sets Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID.
     * @param {Number} broadcastId Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID.
     */
    setBroadcastId(broadcastId) {
        this['broadcast_id'] = broadcastId;
    }
/**
     * Returns Start of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @return {Date}
     */
    getStart() {
        return this.start;
    }

    /**
     * Sets Start of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @param {Date} start Start of the Block (formatted as a DateTime object), saved with an TimeZone.
     */
    setStart(start) {
        this['start'] = start;
    }
/**
     * Returns End of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @return {Date}
     */
    getStop() {
        return this.stop;
    }

    /**
     * Sets End of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @param {Date} stop End of the Block (formatted as a DateTime object), saved with an TimeZone.
     */
    setStop(stop) {
        this['stop'] = stop;
    }
/**
     * Returns Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @return {Date}
     */
    getCreatedAt() {
        return this.created_at;
    }

    /**
     * Sets Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @param {Date} createdAt Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone.
     */
    setCreatedAt(createdAt) {
        this['created_at'] = createdAt;
    }
/**
     * Returns Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @return {Date}
     */
    getUpdatedAt() {
        return this.updated_at;
    }

    /**
     * Sets Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone.
     * @param {Date} updatedAt Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone.
     */
    setUpdatedAt(updatedAt) {
        this['updated_at'] = updatedAt;
    }
/**
     * Returns Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone.
     * @return {Date}
     */
    getDeletedAt() {
        return this.deleted_at;
    }

    /**
     * Sets Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone.
     * @param {Date} deletedAt Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone.
     */
    setDeletedAt(deletedAt) {
        this['deleted_at'] = deletedAt;
    }
/**
     * @return {Number}
     */
    getExternalStationId() {
        return this._external_station_id;
    }

    /**
     * @param {Number} externalStationId
     */
    setExternalStationId(externalStationId) {
        this['_external_station_id'] = externalStationId;
    }
/**
     * @return {module:models/BlockRelationsItems}
     */
    getItems() {
        return this.items;
    }

    /**
     * @param {module:models/BlockRelationsItems} items
     */
    setItems(items) {
        this['items'] = items;
    }
/**
     * @return {module:models/BlockRelationsBroadcast}
     */
    getBroadcast() {
        return this.broadcast;
    }

    /**
     * @param {module:models/BlockRelationsBroadcast} broadcast
     */
    setBroadcast(broadcast) {
        this['broadcast'] = broadcast;
    }
/**
     * @return {module:models/BlockRelationsProgram}
     */
    getProgram() {
        return this.program;
    }

    /**
     * @param {module:models/BlockRelationsProgram} program
     */
    setProgram(program) {
        this['program'] = program;
    }

}

BlockResult.RequiredProperties = ["id", "broadcast_id", "start", "stop", "created_at", "updated_at", "deleted_at"];

/**
 * ID of the current Block.
 * @member {Number} id
 */
BlockResult.prototype['id'] = undefined;

/**
 * Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID.
 * @member {Number} broadcast_id
 */
BlockResult.prototype['broadcast_id'] = undefined;

/**
 * Start of the Block (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} start
 */
BlockResult.prototype['start'] = undefined;

/**
 * End of the Block (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} stop
 */
BlockResult.prototype['stop'] = undefined;

/**
 * Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} created_at
 */
BlockResult.prototype['created_at'] = undefined;

/**
 * Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} updated_at
 */
BlockResult.prototype['updated_at'] = undefined;

/**
 * Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} deleted_at
 */
BlockResult.prototype['deleted_at'] = undefined;

/**
 * @member {Number} _external_station_id
 */
BlockResult.prototype['_external_station_id'] = undefined;

/**
 * @member {module:models/BlockRelationsItems} items
 */
BlockResult.prototype['items'] = undefined;

/**
 * @member {module:models/BlockRelationsBroadcast} broadcast
 */
BlockResult.prototype['broadcast'] = undefined;

/**
 * @member {module:models/BlockRelationsProgram} program
 */
BlockResult.prototype['program'] = undefined;


// Implement Block interface:
/**
 * ID of the current Block.
 * @member {Number} id
 */
Block.prototype['id'] = undefined;
/**
 * Currently assigned Broadcast connected to the current Block, identified by the Broadcast ID.
 * @member {Number} broadcast_id
 */
Block.prototype['broadcast_id'] = undefined;
/**
 * Start of the Block (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} start
 */
Block.prototype['start'] = undefined;
/**
 * End of the Block (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} stop
 */
Block.prototype['stop'] = undefined;
/**
 * Time of the creation of the Block (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} created_at
 */
Block.prototype['created_at'] = undefined;
/**
 * Time of the last update of the Block (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} updated_at
 */
Block.prototype['updated_at'] = undefined;
/**
 * Moment when the Block got deleted (formatted as a DateTime object), saved with an TimeZone.
 * @member {Date} deleted_at
 */
Block.prototype['deleted_at'] = undefined;
/**
 * @member {Number} _external_station_id
 */
Block.prototype['_external_station_id'] = undefined;
// Implement BlockRelations interface:
/**
 * @member {module:models/BlockRelationsItems} items
 */
BlockRelations.prototype['items'] = undefined;
/**
 * @member {module:models/BlockRelationsBroadcast} broadcast
 */
BlockRelations.prototype['broadcast'] = undefined;
/**
 * @member {module:models/BlockRelationsProgram} program
 */
BlockRelations.prototype['program'] = undefined;




export default BlockResult;

