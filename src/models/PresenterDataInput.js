/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Presenter from './Presenter';

/**
 * The PresenterDataInput model module.
 * @module models/PresenterDataInput
 * @version 2.0
 */
class PresenterDataInput {
    /**
     * Constructs a new <code>PresenterDataInput</code>.
     * @alias module:models/PresenterDataInput
     * @implements module:models/Presenter
     * @param modelTypeId {Number} 
     */
    constructor(modelTypeId) { 
        Presenter.initialize(this, modelTypeId);
        PresenterDataInput.initialize(this, modelTypeId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, modelTypeId) { 
        obj['model_type_id'] = modelTypeId;
    }

    /**
     * Constructs a <code>PresenterDataInput</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/PresenterDataInput} obj Optional instance to populate.
     * @return {module:models/PresenterDataInput} The populated <code>PresenterDataInput</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PresenterDataInput();
            Presenter.constructFromObject(data, obj);

            if (data.hasOwnProperty('model_type_id')) {
                obj['model_type_id'] = ApiClient.convertToType(data['model_type_id'], 'Number');
            }
            if (data.hasOwnProperty('field_values')) {
                obj['field_values'] = ApiClient.convertToType(data['field_values'], Object);
            }
            if (data.hasOwnProperty('firstname')) {
                obj['firstname'] = ApiClient.convertToType(data['firstname'], 'String');
            }
            if (data.hasOwnProperty('lastname')) {
                obj['lastname'] = ApiClient.convertToType(data['lastname'], 'String');
            }
            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PresenterDataInput</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PresenterDataInput</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PresenterDataInput.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['firstname'] && !(typeof data['firstname'] === 'string' || data['firstname'] instanceof String)) {
            throw new Error("Expected the field `firstname` to be a primitive type in the JSON string but got " + data['firstname']);
        }
        // ensure the json data is a string
        if (data['lastname'] && !(typeof data['lastname'] === 'string' || data['lastname'] instanceof String)) {
            throw new Error("Expected the field `lastname` to be a primitive type in the JSON string but got " + data['lastname']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }

/**
     * @return {Number}
     */
    getModelTypeId() {
        return this.model_type_id;
    }

    /**
     * @param {Number} modelTypeId
     */
    setModelTypeId(modelTypeId) {
        this['model_type_id'] = modelTypeId;
    }
/**
     * @return {Object}
     */
    getFieldValues() {
        return this.field_values;
    }

    /**
     * @param {Object} fieldValues
     */
    setFieldValues(fieldValues) {
        this['field_values'] = fieldValues;
    }
/**
     * @return {String}
     */
    getFirstname() {
        return this.firstname;
    }

    /**
     * @param {String} firstname
     */
    setFirstname(firstname) {
        this['firstname'] = firstname;
    }
/**
     * @return {String}
     */
    getLastname() {
        return this.lastname;
    }

    /**
     * @param {String} lastname
     */
    setLastname(lastname) {
        this['lastname'] = lastname;
    }
/**
     * @return {Boolean}
     */
    getActive() {
        return this.active;
    }

    /**
     * @param {Boolean} active
     */
    setActive(active) {
        this['active'] = active;
    }
/**
     * @return {String}
     */
    getName() {
        return this.name;
    }

    /**
     * @param {String} name
     */
    setName(name) {
        this['name'] = name;
    }

}

PresenterDataInput.RequiredProperties = ["model_type_id"];

/**
 * @member {Number} model_type_id
 */
PresenterDataInput.prototype['model_type_id'] = undefined;

/**
 * @member {Object} field_values
 */
PresenterDataInput.prototype['field_values'] = undefined;

/**
 * @member {String} firstname
 */
PresenterDataInput.prototype['firstname'] = undefined;

/**
 * @member {String} lastname
 */
PresenterDataInput.prototype['lastname'] = undefined;

/**
 * @member {Boolean} active
 */
PresenterDataInput.prototype['active'] = undefined;

/**
 * @member {String} name
 */
PresenterDataInput.prototype['name'] = undefined;


// Implement Presenter interface:
/**
 * @member {Number} model_type_id
 */
Presenter.prototype['model_type_id'] = undefined;
/**
 * @member {Object} field_values
 */
Presenter.prototype['field_values'] = undefined;
/**
 * @member {String} firstname
 */
Presenter.prototype['firstname'] = undefined;
/**
 * @member {String} lastname
 */
Presenter.prototype['lastname'] = undefined;
/**
 * @member {Boolean} active
 */
Presenter.prototype['active'] = undefined;
/**
 * @member {String} name
 */
Presenter.prototype['name'] = undefined;




export default PresenterDataInput;

