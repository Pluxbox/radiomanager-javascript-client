/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InviteUserData model module.
 * @module models/InviteUserData
 * @version 2.0
 */
class InviteUserData {
    /**
     * Constructs a new <code>InviteUserData</code>.
     * @alias module:models/InviteUserData
     * @param email {String} 
     * @param roleIds {Array.<Number>} 
     */
    constructor(email, roleIds) { 
        
        InviteUserData.initialize(this, email, roleIds);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, roleIds) { 
        obj['email'] = email;
        obj['role_ids'] = roleIds;
    }

    /**
     * Constructs a <code>InviteUserData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/InviteUserData} obj Optional instance to populate.
     * @return {module:models/InviteUserData} The populated <code>InviteUserData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InviteUserData();

            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('role_ids')) {
                obj['role_ids'] = ApiClient.convertToType(data['role_ids'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InviteUserData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InviteUserData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InviteUserData.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['role_ids'])) {
            throw new Error("Expected the field `role_ids` to be an array in the JSON data but got " + data['role_ids']);
        }

        return true;
    }

/**
     * @return {String}
     */
    getEmail() {
        return this.email;
    }

    /**
     * @param {String} email
     */
    setEmail(email) {
        this['email'] = email;
    }
/**
     * @return {Array.<Number>}
     */
    getRoleIds() {
        return this.role_ids;
    }

    /**
     * @param {Array.<Number>} roleIds
     */
    setRoleIds(roleIds) {
        this['role_ids'] = roleIds;
    }

}

InviteUserData.RequiredProperties = ["email", "role_ids"];

/**
 * @member {String} email
 */
InviteUserData.prototype['email'] = undefined;

/**
 * @member {Array.<Number>} role_ids
 */
InviteUserData.prototype['role_ids'] = undefined;






export default InviteUserData;

