/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BroadcastRelationsModelType from './BroadcastRelationsModelType';
import ContactRelationsItems from './ContactRelationsItems';
import ContactRelationsTags from './ContactRelationsTags';

/**
 * The ContactRelations model module.
 * @module models/ContactRelations
 * @version 2.0
 */
class ContactRelations {
    /**
     * Constructs a new <code>ContactRelations</code>.
     * @alias module:models/ContactRelations
     * @param tags {module:models/ContactRelationsTags} 
     */
    constructor(tags) { 
        
        ContactRelations.initialize(this, tags);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tags) { 
        obj['tags'] = tags;
    }

    /**
     * Constructs a <code>ContactRelations</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/ContactRelations} obj Optional instance to populate.
     * @return {module:models/ContactRelations} The populated <code>ContactRelations</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContactRelations();

            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ContactRelationsTags.constructFromObject(data['tags']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ContactRelationsItems.constructFromObject(data['items']);
            }
            if (data.hasOwnProperty('model_type')) {
                obj['model_type'] = BroadcastRelationsModelType.constructFromObject(data['model_type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContactRelations</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContactRelations</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContactRelations.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `tags`
        if (data['tags']) { // data not null
          ContactRelationsTags.validateJSON(data['tags']);
        }
        // validate the optional field `items`
        if (data['items']) { // data not null
          ContactRelationsItems.validateJSON(data['items']);
        }
        // validate the optional field `model_type`
        if (data['model_type']) { // data not null
          BroadcastRelationsModelType.validateJSON(data['model_type']);
        }

        return true;
    }

/**
     * @return {module:models/ContactRelationsTags}
     */
    getTags() {
        return this.tags;
    }

    /**
     * @param {module:models/ContactRelationsTags} tags
     */
    setTags(tags) {
        this['tags'] = tags;
    }
/**
     * @return {module:models/ContactRelationsItems}
     */
    getItems() {
        return this.items;
    }

    /**
     * @param {module:models/ContactRelationsItems} items
     */
    setItems(items) {
        this['items'] = items;
    }
/**
     * @return {module:models/BroadcastRelationsModelType}
     */
    getModelType() {
        return this.model_type;
    }

    /**
     * @param {module:models/BroadcastRelationsModelType} modelType
     */
    setModelType(modelType) {
        this['model_type'] = modelType;
    }

}

ContactRelations.RequiredProperties = ["tags"];

/**
 * @member {module:models/ContactRelationsTags} tags
 */
ContactRelations.prototype['tags'] = undefined;

/**
 * @member {module:models/ContactRelationsItems} items
 */
ContactRelations.prototype['items'] = undefined;

/**
 * @member {module:models/BroadcastRelationsModelType} model_type
 */
ContactRelations.prototype['model_type'] = undefined;






export default ContactRelations;

