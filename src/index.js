/**
 * Pluxbox Radiomanager Client
 * Pluxbox RadioManager gives you the power, flexibility and speed you always wanted in a lightweight and easy-to-use web-based radio solution. With Pluxbox RadioManager you can organise your radio workflow and automate your omnichannel communication with your listeners. We offer wide range specialised services for the radio and connections like Hybrid Radio, Visual Radio, your website and social media without losing focus on your broadcast. For more information visit https://pluxbox.com
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['radiomanager/ApiClient', 'radiomanager/radiomanagermodels/Block', 'radiomanager/radiomanagermodels/BlockRelations', 'radiomanager/radiomanagermodels/BlockRelationsBroadcast', 'radiomanager/radiomanagermodels/BlockRelationsBroadcastParams', 'radiomanager/radiomanagermodels/BlockRelationsItems', 'radiomanager/radiomanagermodels/BlockRelationsItemsParams', 'radiomanager/radiomanagermodels/BlockRelationsProgram', 'radiomanager/radiomanagermodels/BlockResults', 'radiomanager/radiomanagermodels/Broadcast', 'radiomanager/radiomanagermodels/BroadcastFieldValues', 'radiomanager/radiomanagermodels/BroadcastInputOnly', 'radiomanager/radiomanagermodels/BroadcastOutputOnly', 'radiomanager/radiomanagermodels/BroadcastRelations', 'radiomanager/radiomanagermodels/BroadcastRelationsBlocks', 'radiomanager/radiomanagermodels/BroadcastRelationsItems', 'radiomanager/radiomanagermodels/BroadcastRelationsItemsParams', 'radiomanager/radiomanagermodels/BroadcastRelationsModelType', 'radiomanager/radiomanagermodels/BroadcastRelationsPresenters', 'radiomanager/radiomanagermodels/BroadcastRelationsTags', 'radiomanager/radiomanagermodels/BroadcastResults', 'radiomanager/radiomanagermodels/Campaign', 'radiomanager/radiomanagermodels/CampaignOutputOnly', 'radiomanager/radiomanagermodels/CampaignRelations', 'radiomanager/radiomanagermodels/CampaignRelationsItems', 'radiomanager/radiomanagermodels/CampaignRelationsItemsParams', 'radiomanager/radiomanagermodels/CampaignResults', 'radiomanager/radiomanagermodels/Contact', 'radiomanager/radiomanagermodels/ContactFieldValues', 'radiomanager/radiomanagermodels/ContactOutputOnly', 'radiomanager/radiomanagermodels/ContactRelations', 'radiomanager/radiomanagermodels/ContactRelationsItems', 'radiomanager/radiomanagermodels/ContactRelationsTags', 'radiomanager/radiomanagermodels/ContactRelationsTagsParams', 'radiomanager/radiomanagermodels/ContactResults', 'radiomanager/radiomanagermodels/Data', 'radiomanager/radiomanagermodels/Data1', 'radiomanager/radiomanagermodels/EPGBroadcast', 'radiomanager/radiomanagermodels/ExternalMessageQueueData', 'radiomanager/radiomanagermodels/Forbidden', 'radiomanager/radiomanagermodels/Genre', 'radiomanager/radiomanagermodels/GenreOutputOnly', 'radiomanager/radiomanagermodels/GenreRelations', 'radiomanager/radiomanagermodels/GenreRelationsBroadcasts', 'radiomanager/radiomanagermodels/GenreRelationsBroadcastsParams', 'radiomanager/radiomanagermodels/GenreRelationsPrograms', 'radiomanager/radiomanagermodels/GenreResults', 'radiomanager/radiomanagermodels/ImportItem', 'radiomanager/radiomanagermodels/ImportItemFieldValues', 'radiomanager/radiomanagermodels/InlineResponse202', 'radiomanager/radiomanagermodels/InternalServerError', 'radiomanager/radiomanagermodels/InviteUserData', 'radiomanager/radiomanagermodels/InviteUserSuccess', 'radiomanager/radiomanagermodels/Item', 'radiomanager/radiomanagermodels/ItemInputOnly', 'radiomanager/radiomanagermodels/ItemOutputOnly', 'radiomanager/radiomanagermodels/ItemRelations', 'radiomanager/radiomanagermodels/ItemRelationsBlock', 'radiomanager/radiomanagermodels/ItemRelationsCampaign', 'radiomanager/radiomanagermodels/ItemRelationsContacts', 'radiomanager/radiomanagermodels/ItemRelationsContactsParams', 'radiomanager/radiomanagermodels/ItemRelationsProgram', 'radiomanager/radiomanagermodels/ItemRelationsTags', 'radiomanager/radiomanagermodels/ItemResults', 'radiomanager/radiomanagermodels/ModelType', 'radiomanager/radiomanagermodels/ModelTypeOptions', 'radiomanager/radiomanagermodels/ModelTypeOutputOnly', 'radiomanager/radiomanagermodels/ModelTypeRelations', 'radiomanager/radiomanagermodels/ModelTypeRelationsBroadcasts', 'radiomanager/radiomanagermodels/ModelTypeRelationsCampaigns', 'radiomanager/radiomanagermodels/ModelTypeRelationsCampaignsParams', 'radiomanager/radiomanagermodels/ModelTypeRelationsContacts', 'radiomanager/radiomanagermodels/ModelTypeRelationsItems', 'radiomanager/radiomanagermodels/ModelTypeRelationsPresenters', 'radiomanager/radiomanagermodels/ModelTypeRelationsPrograms', 'radiomanager/radiomanagermodels/ModelTypeResults', 'radiomanager/radiomanagermodels/NotFound', 'radiomanager/radiomanagermodels/PostSuccess', 'radiomanager/radiomanagermodels/Presenter', 'radiomanager/radiomanagermodels/PresenterOutputOnly', 'radiomanager/radiomanagermodels/PresenterRelations', 'radiomanager/radiomanagermodels/PresenterRelationsBroadcasts', 'radiomanager/radiomanagermodels/PresenterRelationsPrograms', 'radiomanager/radiomanagermodels/PresenterRelationsProgramsParams', 'radiomanager/radiomanagermodels/PresenterResults', 'radiomanager/radiomanagermodels/Program', 'radiomanager/radiomanagermodels/ProgramFieldValues', 'radiomanager/radiomanagermodels/ProgramInputOnly', 'radiomanager/radiomanagermodels/ProgramOutputOnly', 'radiomanager/radiomanagermodels/ProgramRelations', 'radiomanager/radiomanagermodels/ProgramRelationsBlocks', 'radiomanager/radiomanagermodels/ProgramRelationsBroadcasts', 'radiomanager/radiomanagermodels/ProgramRelationsItems', 'radiomanager/radiomanagermodels/ProgramRelationsItemsParams', 'radiomanager/radiomanagermodels/ProgramRelationsPresenters', 'radiomanager/radiomanagermodels/ProgramRelationsTags', 'radiomanager/radiomanagermodels/ProgramResults', 'radiomanager/radiomanagermodels/ReadOnly', 'radiomanager/radiomanagermodels/RelationsPlaceholder', 'radiomanager/radiomanagermodels/Success', 'radiomanager/radiomanagermodels/Tag', 'radiomanager/radiomanagermodels/TagOutputOnly', 'radiomanager/radiomanagermodels/TagRelations', 'radiomanager/radiomanagermodels/TagRelationsBroadcasts', 'radiomanager/radiomanagermodels/TagRelationsBroadcastsParams', 'radiomanager/radiomanagermodels/TagRelationsContacts', 'radiomanager/radiomanagermodels/TagRelationsItems', 'radiomanager/radiomanagermodels/TagRelationsPrograms', 'radiomanager/radiomanagermodels/TagResults', 'radiomanager/radiomanagermodels/TextString', 'radiomanager/radiomanagermodels/TooManyRequests', 'radiomanager/radiomanagermodels/UnprocessableEntity', 'radiomanager/radiomanagermodels/UserResult', 'radiomanager/radiomanagermodels/UserResultSettings', 'radiomanager/radiomanagermodels/UserResults', 'radiomanager/radiomanagermodels/VisualResult', 'radiomanager/radiomanagermodels/BlockResult', 'radiomanager/radiomanagermodels/BroadcastDataInput', 'radiomanager/radiomanagermodels/BroadcastResult', 'radiomanager/radiomanagermodels/CampaignDataInput', 'radiomanager/radiomanagermodels/CampaignResult', 'radiomanager/radiomanagermodels/ContactDataInput', 'radiomanager/radiomanagermodels/ContactResult', 'radiomanager/radiomanagermodels/GenreResult', 'radiomanager/radiomanagermodels/ItemDataInput', 'radiomanager/radiomanagermodels/ItemResult', 'radiomanager/radiomanagermodels/ModelTypeResult', 'radiomanager/radiomanagermodels/PresenterDataInput', 'radiomanager/radiomanagermodels/PresenterResult', 'radiomanager/radiomanagermodels/ProgramDataInput', 'radiomanager/radiomanagermodels/ProgramResult', 'radiomanager/radiomanagermodels/TagDataInput', 'radiomanager/radiomanagermodels/TagResult', 'radiomanager/radiomanagerclient/BlockApi', 'radiomanager/radiomanagerclient/BroadcastApi', 'radiomanager/radiomanagerclient/CampaignApi', 'radiomanager/radiomanagerclient/ContactApi', 'radiomanager/radiomanagerclient/ExternalMessageApi', 'radiomanager/radiomanagerclient/GenreApi', 'radiomanager/radiomanagerclient/ItemApi', 'radiomanager/radiomanagerclient/ModelTypeApi', 'radiomanager/radiomanagerclient/PresenterApi', 'radiomanager/radiomanagerclient/ProgramApi', 'radiomanager/radiomanagerclient/StringApi', 'radiomanager/radiomanagerclient/TagApi', 'radiomanager/radiomanagerclient/UserApi', 'radiomanager/radiomanagerclient/VisualSlideApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./radiomanagermodels/Block'), require('./radiomanagermodels/BlockRelations'), require('./radiomanagermodels/BlockRelationsBroadcast'), require('./radiomanagermodels/BlockRelationsBroadcastParams'), require('./radiomanagermodels/BlockRelationsItems'), require('./radiomanagermodels/BlockRelationsItemsParams'), require('./radiomanagermodels/BlockRelationsProgram'), require('./radiomanagermodels/BlockResults'), require('./radiomanagermodels/Broadcast'), require('./radiomanagermodels/BroadcastFieldValues'), require('./radiomanagermodels/BroadcastInputOnly'), require('./radiomanagermodels/BroadcastOutputOnly'), require('./radiomanagermodels/BroadcastRelations'), require('./radiomanagermodels/BroadcastRelationsBlocks'), require('./radiomanagermodels/BroadcastRelationsItems'), require('./radiomanagermodels/BroadcastRelationsItemsParams'), require('./radiomanagermodels/BroadcastRelationsModelType'), require('./radiomanagermodels/BroadcastRelationsPresenters'), require('./radiomanagermodels/BroadcastRelationsTags'), require('./radiomanagermodels/BroadcastResults'), require('./radiomanagermodels/Campaign'), require('./radiomanagermodels/CampaignOutputOnly'), require('./radiomanagermodels/CampaignRelations'), require('./radiomanagermodels/CampaignRelationsItems'), require('./radiomanagermodels/CampaignRelationsItemsParams'), require('./radiomanagermodels/CampaignResults'), require('./radiomanagermodels/Contact'), require('./radiomanagermodels/ContactFieldValues'), require('./radiomanagermodels/ContactOutputOnly'), require('./radiomanagermodels/ContactRelations'), require('./radiomanagermodels/ContactRelationsItems'), require('./radiomanagermodels/ContactRelationsTags'), require('./radiomanagermodels/ContactRelationsTagsParams'), require('./radiomanagermodels/ContactResults'), require('./radiomanagermodels/Data'), require('./radiomanagermodels/Data1'), require('./radiomanagermodels/EPGBroadcast'), require('./radiomanagermodels/ExternalMessageQueueData'), require('./radiomanagermodels/Forbidden'), require('./radiomanagermodels/Genre'), require('./radiomanagermodels/GenreOutputOnly'), require('./radiomanagermodels/GenreRelations'), require('./radiomanagermodels/GenreRelationsBroadcasts'), require('./radiomanagermodels/GenreRelationsBroadcastsParams'), require('./radiomanagermodels/GenreRelationsPrograms'), require('./radiomanagermodels/GenreResults'), require('./radiomanagermodels/ImportItem'), require('./radiomanagermodels/ImportItemFieldValues'), require('./radiomanagermodels/InlineResponse202'), require('./radiomanagermodels/InternalServerError'), require('./radiomanagermodels/InviteUserData'), require('./radiomanagermodels/InviteUserSuccess'), require('./radiomanagermodels/Item'), require('./radiomanagermodels/ItemInputOnly'), require('./radiomanagermodels/ItemOutputOnly'), require('./radiomanagermodels/ItemRelations'), require('./radiomanagermodels/ItemRelationsBlock'), require('./radiomanagermodels/ItemRelationsCampaign'), require('./radiomanagermodels/ItemRelationsContacts'), require('./radiomanagermodels/ItemRelationsContactsParams'), require('./radiomanagermodels/ItemRelationsProgram'), require('./radiomanagermodels/ItemRelationsTags'), require('./radiomanagermodels/ItemResults'), require('./radiomanagermodels/ModelType'), require('./radiomanagermodels/ModelTypeOptions'), require('./radiomanagermodels/ModelTypeOutputOnly'), require('./radiomanagermodels/ModelTypeRelations'), require('./radiomanagermodels/ModelTypeRelationsBroadcasts'), require('./radiomanagermodels/ModelTypeRelationsCampaigns'), require('./radiomanagermodels/ModelTypeRelationsCampaignsParams'), require('./radiomanagermodels/ModelTypeRelationsContacts'), require('./radiomanagermodels/ModelTypeRelationsItems'), require('./radiomanagermodels/ModelTypeRelationsPresenters'), require('./radiomanagermodels/ModelTypeRelationsPrograms'), require('./radiomanagermodels/ModelTypeResults'), require('./radiomanagermodels/NotFound'), require('./radiomanagermodels/PostSuccess'), require('./radiomanagermodels/Presenter'), require('./radiomanagermodels/PresenterOutputOnly'), require('./radiomanagermodels/PresenterRelations'), require('./radiomanagermodels/PresenterRelationsBroadcasts'), require('./radiomanagermodels/PresenterRelationsPrograms'), require('./radiomanagermodels/PresenterRelationsProgramsParams'), require('./radiomanagermodels/PresenterResults'), require('./radiomanagermodels/Program'), require('./radiomanagermodels/ProgramFieldValues'), require('./radiomanagermodels/ProgramInputOnly'), require('./radiomanagermodels/ProgramOutputOnly'), require('./radiomanagermodels/ProgramRelations'), require('./radiomanagermodels/ProgramRelationsBlocks'), require('./radiomanagermodels/ProgramRelationsBroadcasts'), require('./radiomanagermodels/ProgramRelationsItems'), require('./radiomanagermodels/ProgramRelationsItemsParams'), require('./radiomanagermodels/ProgramRelationsPresenters'), require('./radiomanagermodels/ProgramRelationsTags'), require('./radiomanagermodels/ProgramResults'), require('./radiomanagermodels/ReadOnly'), require('./radiomanagermodels/RelationsPlaceholder'), require('./radiomanagermodels/Success'), require('./radiomanagermodels/Tag'), require('./radiomanagermodels/TagOutputOnly'), require('./radiomanagermodels/TagRelations'), require('./radiomanagermodels/TagRelationsBroadcasts'), require('./radiomanagermodels/TagRelationsBroadcastsParams'), require('./radiomanagermodels/TagRelationsContacts'), require('./radiomanagermodels/TagRelationsItems'), require('./radiomanagermodels/TagRelationsPrograms'), require('./radiomanagermodels/TagResults'), require('./radiomanagermodels/TextString'), require('./radiomanagermodels/TooManyRequests'), require('./radiomanagermodels/UnprocessableEntity'), require('./radiomanagermodels/UserResult'), require('./radiomanagermodels/UserResultSettings'), require('./radiomanagermodels/UserResults'), require('./radiomanagermodels/VisualResult'), require('./radiomanagermodels/BlockResult'), require('./radiomanagermodels/BroadcastDataInput'), require('./radiomanagermodels/BroadcastResult'), require('./radiomanagermodels/CampaignDataInput'), require('./radiomanagermodels/CampaignResult'), require('./radiomanagermodels/ContactDataInput'), require('./radiomanagermodels/ContactResult'), require('./radiomanagermodels/GenreResult'), require('./radiomanagermodels/ItemDataInput'), require('./radiomanagermodels/ItemResult'), require('./radiomanagermodels/ModelTypeResult'), require('./radiomanagermodels/PresenterDataInput'), require('./radiomanagermodels/PresenterResult'), require('./radiomanagermodels/ProgramDataInput'), require('./radiomanagermodels/ProgramResult'), require('./radiomanagermodels/TagDataInput'), require('./radiomanagermodels/TagResult'), require('./radiomanagerclient/BlockApi'), require('./radiomanagerclient/BroadcastApi'), require('./radiomanagerclient/CampaignApi'), require('./radiomanagerclient/ContactApi'), require('./radiomanagerclient/ExternalMessageApi'), require('./radiomanagerclient/GenreApi'), require('./radiomanagerclient/ItemApi'), require('./radiomanagerclient/ModelTypeApi'), require('./radiomanagerclient/PresenterApi'), require('./radiomanagerclient/ProgramApi'), require('./radiomanagerclient/StringApi'), require('./radiomanagerclient/TagApi'), require('./radiomanagerclient/UserApi'), require('./radiomanagerclient/VisualSlideApi'));
  }
}(function(ApiClient, Block, BlockRelations, BlockRelationsBroadcast, BlockRelationsBroadcastParams, BlockRelationsItems, BlockRelationsItemsParams, BlockRelationsProgram, BlockResults, Broadcast, BroadcastFieldValues, BroadcastInputOnly, BroadcastOutputOnly, BroadcastRelations, BroadcastRelationsBlocks, BroadcastRelationsItems, BroadcastRelationsItemsParams, BroadcastRelationsModelType, BroadcastRelationsPresenters, BroadcastRelationsTags, BroadcastResults, Campaign, CampaignOutputOnly, CampaignRelations, CampaignRelationsItems, CampaignRelationsItemsParams, CampaignResults, Contact, ContactFieldValues, ContactOutputOnly, ContactRelations, ContactRelationsItems, ContactRelationsTags, ContactRelationsTagsParams, ContactResults, Data, Data1, EPGBroadcast, ExternalMessageQueueData, Forbidden, Genre, GenreOutputOnly, GenreRelations, GenreRelationsBroadcasts, GenreRelationsBroadcastsParams, GenreRelationsPrograms, GenreResults, ImportItem, ImportItemFieldValues, InlineResponse202, InternalServerError, InviteUserData, InviteUserSuccess, Item, ItemInputOnly, ItemOutputOnly, ItemRelations, ItemRelationsBlock, ItemRelationsCampaign, ItemRelationsContacts, ItemRelationsContactsParams, ItemRelationsProgram, ItemRelationsTags, ItemResults, ModelType, ModelTypeOptions, ModelTypeOutputOnly, ModelTypeRelations, ModelTypeRelationsBroadcasts, ModelTypeRelationsCampaigns, ModelTypeRelationsCampaignsParams, ModelTypeRelationsContacts, ModelTypeRelationsItems, ModelTypeRelationsPresenters, ModelTypeRelationsPrograms, ModelTypeResults, NotFound, PostSuccess, Presenter, PresenterOutputOnly, PresenterRelations, PresenterRelationsBroadcasts, PresenterRelationsPrograms, PresenterRelationsProgramsParams, PresenterResults, Program, ProgramFieldValues, ProgramInputOnly, ProgramOutputOnly, ProgramRelations, ProgramRelationsBlocks, ProgramRelationsBroadcasts, ProgramRelationsItems, ProgramRelationsItemsParams, ProgramRelationsPresenters, ProgramRelationsTags, ProgramResults, ReadOnly, RelationsPlaceholder, Success, Tag, TagOutputOnly, TagRelations, TagRelationsBroadcasts, TagRelationsBroadcastsParams, TagRelationsContacts, TagRelationsItems, TagRelationsPrograms, TagResults, TextString, TooManyRequests, UnprocessableEntity, UserResult, UserResultSettings, UserResults, VisualResult, BlockResult, BroadcastDataInput, BroadcastResult, CampaignDataInput, CampaignResult, ContactDataInput, ContactResult, GenreResult, ItemDataInput, ItemResult, ModelTypeResult, PresenterDataInput, PresenterResult, ProgramDataInput, ProgramResult, TagDataInput, TagResult, BlockApi, BroadcastApi, CampaignApi, ContactApi, ExternalMessageApi, GenreApi, ItemApi, ModelTypeApi, PresenterApi, ProgramApi, StringApi, TagApi, UserApi, VisualSlideApi) {
  'use strict';

  /**
   * Pluxbox_RadioManager_gives_you_the_power_flexibility_and_speed_you_always_wanted_in_a_lightweight_and_easy_to_use_web_based_radio_solution__With_Pluxbox_RadioManager_you_can_organise_your_radio_workflow_and_automate_your_omnichannel_communication_with_your_listeners__We_offer_wide_range_specialised_services_for_the_radio_and_connections_like_Hybrid_Radio_Visual_Radio_your_website_and_social_media_without_losing_focus_on_your_broadcast__For_more_information_visit_httpspluxbox_com.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var radiomanager = require('radiomanager/index'); // See note below*.
   * var xxxSvc = new radiomanager.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new radiomanager.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['radiomanager/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new radiomanager.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new radiomanager.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module radiomanager/index
   * @version 2.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:radiomanager/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Block model constructor.
     * @property {module:radiomanager/radiomanagermodels/Block}
     */
    Block: Block,
    /**
     * The BlockRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/BlockRelations}
     */
    BlockRelations: BlockRelations,
    /**
     * The BlockRelationsBroadcast model constructor.
     * @property {module:radiomanager/radiomanagermodels/BlockRelationsBroadcast}
     */
    BlockRelationsBroadcast: BlockRelationsBroadcast,
    /**
     * The BlockRelationsBroadcastParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/BlockRelationsBroadcastParams}
     */
    BlockRelationsBroadcastParams: BlockRelationsBroadcastParams,
    /**
     * The BlockRelationsItems model constructor.
     * @property {module:radiomanager/radiomanagermodels/BlockRelationsItems}
     */
    BlockRelationsItems: BlockRelationsItems,
    /**
     * The BlockRelationsItemsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/BlockRelationsItemsParams}
     */
    BlockRelationsItemsParams: BlockRelationsItemsParams,
    /**
     * The BlockRelationsProgram model constructor.
     * @property {module:radiomanager/radiomanagermodels/BlockRelationsProgram}
     */
    BlockRelationsProgram: BlockRelationsProgram,
    /**
     * The BlockResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/BlockResults}
     */
    BlockResults: BlockResults,
    /**
     * The Broadcast model constructor.
     * @property {module:radiomanager/radiomanagermodels/Broadcast}
     */
    Broadcast: Broadcast,
    /**
     * The BroadcastFieldValues model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastFieldValues}
     */
    BroadcastFieldValues: BroadcastFieldValues,
    /**
     * The BroadcastInputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastInputOnly}
     */
    BroadcastInputOnly: BroadcastInputOnly,
    /**
     * The BroadcastOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastOutputOnly}
     */
    BroadcastOutputOnly: BroadcastOutputOnly,
    /**
     * The BroadcastRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastRelations}
     */
    BroadcastRelations: BroadcastRelations,
    /**
     * The BroadcastRelationsBlocks model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastRelationsBlocks}
     */
    BroadcastRelationsBlocks: BroadcastRelationsBlocks,
    /**
     * The BroadcastRelationsItems model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastRelationsItems}
     */
    BroadcastRelationsItems: BroadcastRelationsItems,
    /**
     * The BroadcastRelationsItemsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastRelationsItemsParams}
     */
    BroadcastRelationsItemsParams: BroadcastRelationsItemsParams,
    /**
     * The BroadcastRelationsModelType model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastRelationsModelType}
     */
    BroadcastRelationsModelType: BroadcastRelationsModelType,
    /**
     * The BroadcastRelationsPresenters model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastRelationsPresenters}
     */
    BroadcastRelationsPresenters: BroadcastRelationsPresenters,
    /**
     * The BroadcastRelationsTags model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastRelationsTags}
     */
    BroadcastRelationsTags: BroadcastRelationsTags,
    /**
     * The BroadcastResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastResults}
     */
    BroadcastResults: BroadcastResults,
    /**
     * The Campaign model constructor.
     * @property {module:radiomanager/radiomanagermodels/Campaign}
     */
    Campaign: Campaign,
    /**
     * The CampaignOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/CampaignOutputOnly}
     */
    CampaignOutputOnly: CampaignOutputOnly,
    /**
     * The CampaignRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/CampaignRelations}
     */
    CampaignRelations: CampaignRelations,
    /**
     * The CampaignRelationsItems model constructor.
     * @property {module:radiomanager/radiomanagermodels/CampaignRelationsItems}
     */
    CampaignRelationsItems: CampaignRelationsItems,
    /**
     * The CampaignRelationsItemsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/CampaignRelationsItemsParams}
     */
    CampaignRelationsItemsParams: CampaignRelationsItemsParams,
    /**
     * The CampaignResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/CampaignResults}
     */
    CampaignResults: CampaignResults,
    /**
     * The Contact model constructor.
     * @property {module:radiomanager/radiomanagermodels/Contact}
     */
    Contact: Contact,
    /**
     * The ContactFieldValues model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactFieldValues}
     */
    ContactFieldValues: ContactFieldValues,
    /**
     * The ContactOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactOutputOnly}
     */
    ContactOutputOnly: ContactOutputOnly,
    /**
     * The ContactRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactRelations}
     */
    ContactRelations: ContactRelations,
    /**
     * The ContactRelationsItems model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactRelationsItems}
     */
    ContactRelationsItems: ContactRelationsItems,
    /**
     * The ContactRelationsTags model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactRelationsTags}
     */
    ContactRelationsTags: ContactRelationsTags,
    /**
     * The ContactRelationsTagsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactRelationsTagsParams}
     */
    ContactRelationsTagsParams: ContactRelationsTagsParams,
    /**
     * The ContactResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactResults}
     */
    ContactResults: ContactResults,
    /**
     * The Data model constructor.
     * @property {module:radiomanager/radiomanagermodels/Data}
     */
    Data: Data,
    /**
     * The Data1 model constructor.
     * @property {module:radiomanager/radiomanagermodels/Data1}
     */
    Data1: Data1,
    /**
     * The EPGBroadcast model constructor.
     * @property {module:radiomanager/radiomanagermodels/EPGBroadcast}
     */
    EPGBroadcast: EPGBroadcast,
    /**
     * The ExternalMessageQueueData model constructor.
     * @property {module:radiomanager/radiomanagermodels/ExternalMessageQueueData}
     */
    ExternalMessageQueueData: ExternalMessageQueueData,
    /**
     * The Forbidden model constructor.
     * @property {module:radiomanager/radiomanagermodels/Forbidden}
     */
    Forbidden: Forbidden,
    /**
     * The Genre model constructor.
     * @property {module:radiomanager/radiomanagermodels/Genre}
     */
    Genre: Genre,
    /**
     * The GenreOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/GenreOutputOnly}
     */
    GenreOutputOnly: GenreOutputOnly,
    /**
     * The GenreRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/GenreRelations}
     */
    GenreRelations: GenreRelations,
    /**
     * The GenreRelationsBroadcasts model constructor.
     * @property {module:radiomanager/radiomanagermodels/GenreRelationsBroadcasts}
     */
    GenreRelationsBroadcasts: GenreRelationsBroadcasts,
    /**
     * The GenreRelationsBroadcastsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/GenreRelationsBroadcastsParams}
     */
    GenreRelationsBroadcastsParams: GenreRelationsBroadcastsParams,
    /**
     * The GenreRelationsPrograms model constructor.
     * @property {module:radiomanager/radiomanagermodels/GenreRelationsPrograms}
     */
    GenreRelationsPrograms: GenreRelationsPrograms,
    /**
     * The GenreResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/GenreResults}
     */
    GenreResults: GenreResults,
    /**
     * The ImportItem model constructor.
     * @property {module:radiomanager/radiomanagermodels/ImportItem}
     */
    ImportItem: ImportItem,
    /**
     * The ImportItemFieldValues model constructor.
     * @property {module:radiomanager/radiomanagermodels/ImportItemFieldValues}
     */
    ImportItemFieldValues: ImportItemFieldValues,
    /**
     * The InlineResponse202 model constructor.
     * @property {module:radiomanager/radiomanagermodels/InlineResponse202}
     */
    InlineResponse202: InlineResponse202,
    /**
     * The InternalServerError model constructor.
     * @property {module:radiomanager/radiomanagermodels/InternalServerError}
     */
    InternalServerError: InternalServerError,
    /**
     * The InviteUserData model constructor.
     * @property {module:radiomanager/radiomanagermodels/InviteUserData}
     */
    InviteUserData: InviteUserData,
    /**
     * The InviteUserSuccess model constructor.
     * @property {module:radiomanager/radiomanagermodels/InviteUserSuccess}
     */
    InviteUserSuccess: InviteUserSuccess,
    /**
     * The Item model constructor.
     * @property {module:radiomanager/radiomanagermodels/Item}
     */
    Item: Item,
    /**
     * The ItemInputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemInputOnly}
     */
    ItemInputOnly: ItemInputOnly,
    /**
     * The ItemOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemOutputOnly}
     */
    ItemOutputOnly: ItemOutputOnly,
    /**
     * The ItemRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemRelations}
     */
    ItemRelations: ItemRelations,
    /**
     * The ItemRelationsBlock model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemRelationsBlock}
     */
    ItemRelationsBlock: ItemRelationsBlock,
    /**
     * The ItemRelationsCampaign model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemRelationsCampaign}
     */
    ItemRelationsCampaign: ItemRelationsCampaign,
    /**
     * The ItemRelationsContacts model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemRelationsContacts}
     */
    ItemRelationsContacts: ItemRelationsContacts,
    /**
     * The ItemRelationsContactsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemRelationsContactsParams}
     */
    ItemRelationsContactsParams: ItemRelationsContactsParams,
    /**
     * The ItemRelationsProgram model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemRelationsProgram}
     */
    ItemRelationsProgram: ItemRelationsProgram,
    /**
     * The ItemRelationsTags model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemRelationsTags}
     */
    ItemRelationsTags: ItemRelationsTags,
    /**
     * The ItemResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemResults}
     */
    ItemResults: ItemResults,
    /**
     * The ModelType model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelType}
     */
    ModelType: ModelType,
    /**
     * The ModelTypeOptions model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeOptions}
     */
    ModelTypeOptions: ModelTypeOptions,
    /**
     * The ModelTypeOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeOutputOnly}
     */
    ModelTypeOutputOnly: ModelTypeOutputOnly,
    /**
     * The ModelTypeRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeRelations}
     */
    ModelTypeRelations: ModelTypeRelations,
    /**
     * The ModelTypeRelationsBroadcasts model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeRelationsBroadcasts}
     */
    ModelTypeRelationsBroadcasts: ModelTypeRelationsBroadcasts,
    /**
     * The ModelTypeRelationsCampaigns model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeRelationsCampaigns}
     */
    ModelTypeRelationsCampaigns: ModelTypeRelationsCampaigns,
    /**
     * The ModelTypeRelationsCampaignsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeRelationsCampaignsParams}
     */
    ModelTypeRelationsCampaignsParams: ModelTypeRelationsCampaignsParams,
    /**
     * The ModelTypeRelationsContacts model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeRelationsContacts}
     */
    ModelTypeRelationsContacts: ModelTypeRelationsContacts,
    /**
     * The ModelTypeRelationsItems model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeRelationsItems}
     */
    ModelTypeRelationsItems: ModelTypeRelationsItems,
    /**
     * The ModelTypeRelationsPresenters model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeRelationsPresenters}
     */
    ModelTypeRelationsPresenters: ModelTypeRelationsPresenters,
    /**
     * The ModelTypeRelationsPrograms model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeRelationsPrograms}
     */
    ModelTypeRelationsPrograms: ModelTypeRelationsPrograms,
    /**
     * The ModelTypeResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeResults}
     */
    ModelTypeResults: ModelTypeResults,
    /**
     * The NotFound model constructor.
     * @property {module:radiomanager/radiomanagermodels/NotFound}
     */
    NotFound: NotFound,
    /**
     * The PostSuccess model constructor.
     * @property {module:radiomanager/radiomanagermodels/PostSuccess}
     */
    PostSuccess: PostSuccess,
    /**
     * The Presenter model constructor.
     * @property {module:radiomanager/radiomanagermodels/Presenter}
     */
    Presenter: Presenter,
    /**
     * The PresenterOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/PresenterOutputOnly}
     */
    PresenterOutputOnly: PresenterOutputOnly,
    /**
     * The PresenterRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/PresenterRelations}
     */
    PresenterRelations: PresenterRelations,
    /**
     * The PresenterRelationsBroadcasts model constructor.
     * @property {module:radiomanager/radiomanagermodels/PresenterRelationsBroadcasts}
     */
    PresenterRelationsBroadcasts: PresenterRelationsBroadcasts,
    /**
     * The PresenterRelationsPrograms model constructor.
     * @property {module:radiomanager/radiomanagermodels/PresenterRelationsPrograms}
     */
    PresenterRelationsPrograms: PresenterRelationsPrograms,
    /**
     * The PresenterRelationsProgramsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/PresenterRelationsProgramsParams}
     */
    PresenterRelationsProgramsParams: PresenterRelationsProgramsParams,
    /**
     * The PresenterResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/PresenterResults}
     */
    PresenterResults: PresenterResults,
    /**
     * The Program model constructor.
     * @property {module:radiomanager/radiomanagermodels/Program}
     */
    Program: Program,
    /**
     * The ProgramFieldValues model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramFieldValues}
     */
    ProgramFieldValues: ProgramFieldValues,
    /**
     * The ProgramInputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramInputOnly}
     */
    ProgramInputOnly: ProgramInputOnly,
    /**
     * The ProgramOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramOutputOnly}
     */
    ProgramOutputOnly: ProgramOutputOnly,
    /**
     * The ProgramRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramRelations}
     */
    ProgramRelations: ProgramRelations,
    /**
     * The ProgramRelationsBlocks model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramRelationsBlocks}
     */
    ProgramRelationsBlocks: ProgramRelationsBlocks,
    /**
     * The ProgramRelationsBroadcasts model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramRelationsBroadcasts}
     */
    ProgramRelationsBroadcasts: ProgramRelationsBroadcasts,
    /**
     * The ProgramRelationsItems model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramRelationsItems}
     */
    ProgramRelationsItems: ProgramRelationsItems,
    /**
     * The ProgramRelationsItemsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramRelationsItemsParams}
     */
    ProgramRelationsItemsParams: ProgramRelationsItemsParams,
    /**
     * The ProgramRelationsPresenters model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramRelationsPresenters}
     */
    ProgramRelationsPresenters: ProgramRelationsPresenters,
    /**
     * The ProgramRelationsTags model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramRelationsTags}
     */
    ProgramRelationsTags: ProgramRelationsTags,
    /**
     * The ProgramResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramResults}
     */
    ProgramResults: ProgramResults,
    /**
     * The ReadOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/ReadOnly}
     */
    ReadOnly: ReadOnly,
    /**
     * The RelationsPlaceholder model constructor.
     * @property {module:radiomanager/radiomanagermodels/RelationsPlaceholder}
     */
    RelationsPlaceholder: RelationsPlaceholder,
    /**
     * The Success model constructor.
     * @property {module:radiomanager/radiomanagermodels/Success}
     */
    Success: Success,
    /**
     * The Tag model constructor.
     * @property {module:radiomanager/radiomanagermodels/Tag}
     */
    Tag: Tag,
    /**
     * The TagOutputOnly model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagOutputOnly}
     */
    TagOutputOnly: TagOutputOnly,
    /**
     * The TagRelations model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagRelations}
     */
    TagRelations: TagRelations,
    /**
     * The TagRelationsBroadcasts model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagRelationsBroadcasts}
     */
    TagRelationsBroadcasts: TagRelationsBroadcasts,
    /**
     * The TagRelationsBroadcastsParams model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagRelationsBroadcastsParams}
     */
    TagRelationsBroadcastsParams: TagRelationsBroadcastsParams,
    /**
     * The TagRelationsContacts model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagRelationsContacts}
     */
    TagRelationsContacts: TagRelationsContacts,
    /**
     * The TagRelationsItems model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagRelationsItems}
     */
    TagRelationsItems: TagRelationsItems,
    /**
     * The TagRelationsPrograms model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagRelationsPrograms}
     */
    TagRelationsPrograms: TagRelationsPrograms,
    /**
     * The TagResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagResults}
     */
    TagResults: TagResults,
    /**
     * The TextString model constructor.
     * @property {module:radiomanager/radiomanagermodels/TextString}
     */
    TextString: TextString,
    /**
     * The TooManyRequests model constructor.
     * @property {module:radiomanager/radiomanagermodels/TooManyRequests}
     */
    TooManyRequests: TooManyRequests,
    /**
     * The UnprocessableEntity model constructor.
     * @property {module:radiomanager/radiomanagermodels/UnprocessableEntity}
     */
    UnprocessableEntity: UnprocessableEntity,
    /**
     * The UserResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/UserResult}
     */
    UserResult: UserResult,
    /**
     * The UserResultSettings model constructor.
     * @property {module:radiomanager/radiomanagermodels/UserResultSettings}
     */
    UserResultSettings: UserResultSettings,
    /**
     * The UserResults model constructor.
     * @property {module:radiomanager/radiomanagermodels/UserResults}
     */
    UserResults: UserResults,
    /**
     * The VisualResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/VisualResult}
     */
    VisualResult: VisualResult,
    /**
     * The BlockResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/BlockResult}
     */
    BlockResult: BlockResult,
    /**
     * The BroadcastDataInput model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastDataInput}
     */
    BroadcastDataInput: BroadcastDataInput,
    /**
     * The BroadcastResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/BroadcastResult}
     */
    BroadcastResult: BroadcastResult,
    /**
     * The CampaignDataInput model constructor.
     * @property {module:radiomanager/radiomanagermodels/CampaignDataInput}
     */
    CampaignDataInput: CampaignDataInput,
    /**
     * The CampaignResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/CampaignResult}
     */
    CampaignResult: CampaignResult,
    /**
     * The ContactDataInput model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactDataInput}
     */
    ContactDataInput: ContactDataInput,
    /**
     * The ContactResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/ContactResult}
     */
    ContactResult: ContactResult,
    /**
     * The GenreResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/GenreResult}
     */
    GenreResult: GenreResult,
    /**
     * The ItemDataInput model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemDataInput}
     */
    ItemDataInput: ItemDataInput,
    /**
     * The ItemResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/ItemResult}
     */
    ItemResult: ItemResult,
    /**
     * The ModelTypeResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/ModelTypeResult}
     */
    ModelTypeResult: ModelTypeResult,
    /**
     * The PresenterDataInput model constructor.
     * @property {module:radiomanager/radiomanagermodels/PresenterDataInput}
     */
    PresenterDataInput: PresenterDataInput,
    /**
     * The PresenterResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/PresenterResult}
     */
    PresenterResult: PresenterResult,
    /**
     * The ProgramDataInput model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramDataInput}
     */
    ProgramDataInput: ProgramDataInput,
    /**
     * The ProgramResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/ProgramResult}
     */
    ProgramResult: ProgramResult,
    /**
     * The TagDataInput model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagDataInput}
     */
    TagDataInput: TagDataInput,
    /**
     * The TagResult model constructor.
     * @property {module:radiomanager/radiomanagermodels/TagResult}
     */
    TagResult: TagResult,
    /**
     * The BlockApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/BlockApi}
     */
    BlockApi: BlockApi,
    /**
     * The BroadcastApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/BroadcastApi}
     */
    BroadcastApi: BroadcastApi,
    /**
     * The CampaignApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/CampaignApi}
     */
    CampaignApi: CampaignApi,
    /**
     * The ContactApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/ContactApi}
     */
    ContactApi: ContactApi,
    /**
     * The ExternalMessageApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/ExternalMessageApi}
     */
    ExternalMessageApi: ExternalMessageApi,
    /**
     * The GenreApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/GenreApi}
     */
    GenreApi: GenreApi,
    /**
     * The ItemApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/ItemApi}
     */
    ItemApi: ItemApi,
    /**
     * The ModelTypeApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/ModelTypeApi}
     */
    ModelTypeApi: ModelTypeApi,
    /**
     * The PresenterApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/PresenterApi}
     */
    PresenterApi: PresenterApi,
    /**
     * The ProgramApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/ProgramApi}
     */
    ProgramApi: ProgramApi,
    /**
     * The StringApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/StringApi}
     */
    StringApi: StringApi,
    /**
     * The TagApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/TagApi}
     */
    TagApi: TagApi,
    /**
     * The UserApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/UserApi}
     */
    UserApi: UserApi,
    /**
     * The VisualSlideApi service constructor.
     * @property {module:radiomanager/radiomanagerclient/VisualSlideApi}
     */
    VisualSlideApi: VisualSlideApi
  };

  return exports;
}));
