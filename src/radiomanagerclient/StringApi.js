/**
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.0
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'radiomanagermodels/NotFound', 'radiomanagermodels/TextString', 'radiomanagermodels/TooManyRequests'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../radiomanagermodels/NotFound'), require('../radiomanagermodels/TextString'), require('../radiomanagermodels/TooManyRequests'));
  } else {
    // Browser globals (root is window)
    if (!root.radiomanager) {
      root.radiomanager = {};
    }
    root.radiomanager.StringApi = factory(root.radiomanager.ApiClient, root.radiomanager.NotFound, root.radiomanager.TextString, root.radiomanager.TooManyRequests);
  }
}(this, function(ApiClient, NotFound, TextString, TooManyRequests) {
  'use strict';

  /**
   * String service.
   * @module radiomanagerclient/StringApi
   * @version 2.0
   */

  /**
   * Constructs a new StringApi. 
   * @alias module:radiomanagerclient/StringApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get Strings (formatted)
     * Get Strings (formatted)
     * @param {String} name Name of Strings **(Required)**
     * @param {Boolean} fullModel Full model or content only **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:radiomanagermodels/TextString} and HTTP response
     */
    this.getStringsByNameWithHttpInfo = function(name, fullModel) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getStringsByName");
      }

      // verify the required parameter 'fullModel' is set
      if (fullModel === undefined || fullModel === null) {
        throw new Error("Missing the required parameter 'fullModel' when calling getStringsByName");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
        'full_model': fullModel,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TextString;

      return this.apiClient.callApi(
        '/strings/{name}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get Strings (formatted)
     * Get Strings (formatted)
     * @param {String} name Name of Strings **(Required)**
     * @param {Boolean} fullModel Full model or content only **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:radiomanagermodels/TextString}
     */
    this.getStringsByName = function(name, fullModel) {
      return this.getStringsByNameWithHttpInfo(name, fullModel)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
