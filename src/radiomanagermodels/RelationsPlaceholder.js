/**
 * RadioManager
 * RadioManager
 *
 * OpenAPI spec version: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.radiomanager) {
      root.radiomanager = {};
    }
    root.radiomanager.RelationsPlaceholder = factory(root.radiomanager.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The RelationsPlaceholder model module.
   * @module radiomanagermodels/RelationsPlaceholder
   * @version 2.0
   */

  /**
   * Constructs a new <code>RelationsPlaceholder</code>.
   * @alias module:radiomanagermodels/RelationsPlaceholder
   * @class
   * @param href {String} HREF
   * @param model {String} MODEL
   * @param operation {String} OPERATION
   * @param params {Object} PARAMS
   */
  var exports = function(href, model, operation, params) {
    var _this = this;

    _this['href'] = href;
    _this['model'] = model;
    _this['operation'] = operation;
    _this['params'] = params;
  };

  /**
   * Constructs a <code>RelationsPlaceholder</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:radiomanagermodels/RelationsPlaceholder} obj Optional instance to populate.
   * @return {module:radiomanagermodels/RelationsPlaceholder} The populated <code>RelationsPlaceholder</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('href')) {
        obj['href'] = ApiClient.convertToType(data['href'], 'String');
      }
      if (data.hasOwnProperty('model')) {
        obj['model'] = ApiClient.convertToType(data['model'], 'String');
      }
      if (data.hasOwnProperty('operation')) {
        obj['operation'] = ApiClient.convertToType(data['operation'], 'String');
      }
      if (data.hasOwnProperty('params')) {
        obj['params'] = ApiClient.convertToType(data['params'], Object);
      }
    }
    return obj;
  }

  /**
   * HREF
   * @member {String} href
   */
  exports.prototype['href'] = undefined;
  /**
   * MODEL
   * @member {String} model
   */
  exports.prototype['model'] = undefined;
  /**
   * OPERATION
   * @member {String} operation
   */
  exports.prototype['operation'] = undefined;
  /**
   * PARAMS
   * @member {Object} params
   */
  exports.prototype['params'] = undefined;


  /**
   * Returns HREF
   * @return {String}
   */
  exports.prototype.getHref = function() {
    return this['href'];
  }

  /**
   * Sets HREF
   * @param {String} href HREF
   */
  exports.prototype.setHref = function(href) {
    this['href'] = href;
  }


  /**
   * Returns MODEL
   * @return {String}
   */
  exports.prototype.getModel = function() {
    return this['model'];
  }

  /**
   * Sets MODEL
   * @param {String} model MODEL
   */
  exports.prototype.setModel = function(model) {
    this['model'] = model;
  }


  /**
   * Returns OPERATION
   * @return {String}
   */
  exports.prototype.getOperation = function() {
    return this['operation'];
  }

  /**
   * Sets OPERATION
   * @param {String} operation OPERATION
   */
  exports.prototype.setOperation = function(operation) {
    this['operation'] = operation;
  }


  /**
   * Returns PARAMS
   * @return {Object}
   */
  exports.prototype.getParams = function() {
    return this['params'];
  }

  /**
   * Sets PARAMS
   * @param {Object} params PARAMS
   */
  exports.prototype.setParams = function(params) {
    this['params'] = params;
  }



  return exports;
}));


