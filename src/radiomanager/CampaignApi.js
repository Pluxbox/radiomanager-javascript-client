/**
 * RadioManager
 * RadioManager
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/Campaign', 'models/CampaignDataInput', 'models/CampaignResult', 'models/CampaignResults', 'models/Forbidden', 'models/NotFound', 'models/PostSuccess', 'models/Success', 'models/TooManyRequests', 'models/UnprocessableEntity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../models/Campaign'), require('../models/CampaignDataInput'), require('../models/CampaignResult'), require('../models/CampaignResults'), require('../models/Forbidden'), require('../models/NotFound'), require('../models/PostSuccess'), require('../models/Success'), require('../models/TooManyRequests'), require('../models/UnprocessableEntity'));
  } else {
    // Browser globals (root is window)
    if (!root.radiomanager) {
      root.radiomanager = {};
    }
    root.radiomanager.CampaignApi = factory(root.radiomanager.ApiClient, root.radiomanager.Campaign, root.radiomanager.CampaignDataInput, root.radiomanager.CampaignResult, root.radiomanager.CampaignResults, root.radiomanager.Forbidden, root.radiomanager.NotFound, root.radiomanager.PostSuccess, root.radiomanager.Success, root.radiomanager.TooManyRequests, root.radiomanager.UnprocessableEntity);
  }
}(this, function(ApiClient, Campaign, CampaignDataInput, CampaignResult, CampaignResults, Forbidden, NotFound, PostSuccess, Success, TooManyRequests, UnprocessableEntity) {
  'use strict';

  /**
   * Campaign service.
   * @module radiomanager/CampaignApi
   * @version 2.0
   */

  /**
   * Constructs a new CampaignApi. 
   * @alias module:radiomanager/CampaignApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create campaign.
     * Create campaign.
     * @param {module:models/CampaignDataInput} data Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PostSuccess} and HTTP response
     */
    this.createCampaignWithHttpInfo = function(data) {
      var postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createCampaign");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostSuccess;
      return this.apiClient.callApi(
        '/campaigns', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create campaign.
     * Create campaign.
     * @param {module:models/CampaignDataInput} data Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PostSuccess}
     */
    this.createCampaign = function(data) {
      return this.createCampaignWithHttpInfo(data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete campaign by id
     * Delete campaign by id
     * @param {Number} id ID of Campaign **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Success} and HTTP response
     */
    this.deleteCampaignByIdWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteCampaignById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Success;
      return this.apiClient.callApi(
        '/campaigns/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete campaign by id
     * Delete campaign by id
     * @param {Number} id ID of Campaign **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Success}
     */
    this.deleteCampaignById = function(id) {
      return this.deleteCampaignByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get campaign by id
     * Get campaign by id
     * @param {Number} id ID of Campaign **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CampaignResult} and HTTP response
     */
    this.getCampaignByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCampaignById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_external_station_id': opts['externalStationId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CampaignResult;
      return this.apiClient.callApi(
        '/campaigns/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get campaign by id
     * Get campaign by id
     * @param {Number} id ID of Campaign **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CampaignResult}
     */
    this.getCampaignById = function(id, opts) {
      return this.getCampaignByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all campaigns.
     * List all campaigns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page *(Optional)*
     * @param {Number} opts.itemId Search on Item ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Date} opts.startMin Minimum start date *(Optional)*
     * @param {Date} opts.startMax Maximum start date *(Optional)*
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CampaignResults} and HTTP response
     */
    this.listCampaignsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'item_id': opts['itemId'],
        'model_type_id': opts['modelTypeId'],
        'start-min': opts['startMin'],
        'start-max': opts['startMax'],
        'limit': opts['limit'],
        'order-by': opts['orderBy'],
        'order-direction': opts['orderDirection'],
        '_external_station_id': opts['externalStationId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = CampaignResults;
      return this.apiClient.callApi(
        '/campaigns', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all campaigns.
     * List all campaigns.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page *(Optional)*
     * @param {Number} opts.itemId Search on Item ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Date} opts.startMin Minimum start date *(Optional)*
     * @param {Date} opts.startMax Maximum start date *(Optional)*
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CampaignResults}
     */
    this.listCampaigns = function(opts) {
      return this.listCampaignsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update campaign by id
     * Update campaign by id
     * @param {Number} id ID of Campaign **(Required)**
     * @param {Object} opts Optional parameters
     * @param {module:models/CampaignDataInput} opts.data Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Success} and HTTP response
     */
    this.updateCampaignByIDWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['data'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateCampaignByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;
      return this.apiClient.callApi(
        '/campaigns/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update campaign by id
     * Update campaign by id
     * @param {Number} id ID of Campaign **(Required)**
     * @param {Object} opts Optional parameters
     * @param {module:models/CampaignDataInput} opts.data Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Success}
     */
    this.updateCampaignByID = function(id, opts) {
      return this.updateCampaignByIDWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
