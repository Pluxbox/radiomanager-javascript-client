/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse2009 from '../models/InlineResponse2009';
import InlineResponse400 from '../models/InlineResponse400';
import InlineResponse401 from '../models/InlineResponse401';
import InlineResponse403 from '../models/InlineResponse403';
import InlineResponse404 from '../models/InlineResponse404';
import InlineResponse422 from '../models/InlineResponse422';
import InlineResponse429 from '../models/InlineResponse429';
import InlineResponse500 from '../models/InlineResponse500';
import ModelTypeResult from '../models/ModelTypeResult';

/**
* ModelType service.
* @module radiomanager/ModelTypeApi
* @version 2.0
*/
export default class ModelTypeApi {

    /**
    * Constructs a new ModelTypeApi. 
    * @alias module:radiomanager/ModelTypeApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get modelType by id
     * Get modelType by id
     * @param {Number} id ID of ModelType **(Required)**
     * @param {Object} opts Optional parameters
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ModelTypeResult} and HTTP response
     */
    getModelTypeByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelTypeById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'order-direction': opts['orderDirection'],
        '_external_station_id': opts['externalStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelTypeResult;
      return this.apiClient.callApi(
        '/model_types/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get modelType by id
     * Get modelType by id
     * @param {Number} id ID of ModelType **(Required)**
     * @param {Object} opts Optional parameters
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ModelTypeResult}
     */
    getModelTypeById(id, opts) {
      return this.getModelTypeByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all modelTypes.
     * List all modelTypes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.programId Search on Program ID *(Optional)*
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)*
     * @param {Number} opts.itemId Search on Item ID *(Optional)*
     * @param {Number} opts.campaignId Search on Campaign ID *(Optional)*
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)*
     * @param {Number} opts.contactId Search on Contact ID *(Optional)*
     * @param {module:models/String} opts.model Search Modeltypes for certain Model *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2009} and HTTP response
     */
    listModelTypesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'program_id': opts['programId'],
        'broadcast_id': opts['broadcastId'],
        'item_id': opts['itemId'],
        'campaign_id': opts['campaignId'],
        'presenter_id': opts['presenterId'],
        'contact_id': opts['contactId'],
        'model': opts['model'],
        'order-direction': opts['orderDirection'],
        '_external_station_id': opts['externalStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;
      return this.apiClient.callApi(
        '/model_types', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all modelTypes.
     * List all modelTypes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.programId Search on Program ID *(Optional)*
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)*
     * @param {Number} opts.itemId Search on Item ID *(Optional)*
     * @param {Number} opts.campaignId Search on Campaign ID *(Optional)*
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)*
     * @param {Number} opts.contactId Search on Contact ID *(Optional)*
     * @param {module:models/String} opts.model Search Modeltypes for certain Model *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2009}
     */
    listModelTypes(opts) {
      return this.listModelTypesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
