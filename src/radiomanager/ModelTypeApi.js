/**
 * RadioManager
 * RadioManager
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/Forbidden', 'models/ModelTypeResult', 'models/ModelTypeResults', 'models/NotFound', 'models/TooManyRequests'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../models/Forbidden'), require('../models/ModelTypeResult'), require('../models/ModelTypeResults'), require('../models/NotFound'), require('../models/TooManyRequests'));
  } else {
    // Browser globals (root is window)
    if (!root.radiomanager) {
      root.radiomanager = {};
    }
    root.radiomanager.ModelTypeApi = factory(root.radiomanager.ApiClient, root.radiomanager.Forbidden, root.radiomanager.ModelTypeResult, root.radiomanager.ModelTypeResults, root.radiomanager.NotFound, root.radiomanager.TooManyRequests);
  }
}(this, function(ApiClient, Forbidden, ModelTypeResult, ModelTypeResults, NotFound, TooManyRequests) {
  'use strict';

  /**
   * ModelType service.
   * @module radiomanager/ModelTypeApi
   * @version 2.0
   */

  /**
   * Constructs a new ModelTypeApi. 
   * @alias module:radiomanager/ModelTypeApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Get modelType by id
     * Get modelType by id
     * @param {Number} id ID of ModelType **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ModelTypeResult} and HTTP response
     */
    this.getModelTypeByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getModelTypeById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_external_station_id': opts['externalStationId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelTypeResult;
      return this.apiClient.callApi(
        '/model_types/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get modelType by id
     * Get modelType by id
     * @param {Number} id ID of ModelType **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ModelTypeResult}
     */
    this.getModelTypeById = function(id, opts) {
      return this.getModelTypeByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all modelTypes.
     * List all modelTypes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page *(Optional)*
     * @param {Number} opts.programId Search on Program ID *(Optional)*
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)*
     * @param {Number} opts.itemId Search on Item ID *(Optional)*
     * @param {Number} opts.campaignId Search on Campaign ID *(Optional)*
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)*
     * @param {Number} opts.contactId Search on Contact ID *(Optional)*
     * @param {module:models/String} opts.model Search Modeltypes for certain Model *(Optional)*
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ModelTypeResults} and HTTP response
     */
    this.listModelTypesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'program_id': opts['programId'],
        'broadcast_id': opts['broadcastId'],
        'item_id': opts['itemId'],
        'campaign_id': opts['campaignId'],
        'presenter_id': opts['presenterId'],
        'contact_id': opts['contactId'],
        'model': opts['model'],
        'limit': opts['limit'],
        'order-by': opts['orderBy'],
        'order-direction': opts['orderDirection'],
        '_external_station_id': opts['externalStationId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ModelTypeResults;
      return this.apiClient.callApi(
        '/model_types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all modelTypes.
     * List all modelTypes.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page *(Optional)*
     * @param {Number} opts.programId Search on Program ID *(Optional)*
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)*
     * @param {Number} opts.itemId Search on Item ID *(Optional)*
     * @param {Number} opts.campaignId Search on Campaign ID *(Optional)*
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)*
     * @param {Number} opts.contactId Search on Contact ID *(Optional)*
     * @param {module:models/String} opts.model Search Modeltypes for certain Model *(Optional)*
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ModelTypeResults}
     */
    this.listModelTypes = function(opts) {
      return this.listModelTypesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
