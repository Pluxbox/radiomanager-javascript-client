/**
 * RadioManager
 * RadioManager
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 *
 * OpenAPI Generator version: 4.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'models/Forbidden', 'models/NotFound', 'models/PostSuccess', 'models/ProgramDataInput', 'models/ProgramResult', 'models/ProgramResults', 'models/Success', 'models/TooManyRequests', 'models/UnprocessableEntity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../models/Forbidden'), require('../models/NotFound'), require('../models/PostSuccess'), require('../models/ProgramDataInput'), require('../models/ProgramResult'), require('../models/ProgramResults'), require('../models/Success'), require('../models/TooManyRequests'), require('../models/UnprocessableEntity'));
  } else {
    // Browser globals (root is window)
    if (!root.radiomanager) {
      root.radiomanager = {};
    }
    root.radiomanager.ProgramApi = factory(root.radiomanager.ApiClient, root.radiomanager.Forbidden, root.radiomanager.NotFound, root.radiomanager.PostSuccess, root.radiomanager.ProgramDataInput, root.radiomanager.ProgramResult, root.radiomanager.ProgramResults, root.radiomanager.Success, root.radiomanager.TooManyRequests, root.radiomanager.UnprocessableEntity);
  }
}(this, function(ApiClient, Forbidden, NotFound, PostSuccess, ProgramDataInput, ProgramResult, ProgramResults, Success, TooManyRequests, UnprocessableEntity) {
  'use strict';

  /**
   * Program service.
   * @module radiomanager/ProgramApi
   * @version 2.0
   */

  /**
   * Constructs a new ProgramApi. 
   * @alias module:radiomanager/ProgramApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create program.
     * Create program.
     * @param {module:models/ProgramDataInput} data Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PostSuccess} and HTTP response
     */
    this.createProgramWithHttpInfo = function(data) {
      var postBody = data;
      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling createProgram");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PostSuccess;
      return this.apiClient.callApi(
        '/programs', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create program.
     * Create program.
     * @param {module:models/ProgramDataInput} data Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PostSuccess}
     */
    this.createProgram = function(data) {
      return this.createProgramWithHttpInfo(data)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete program by id
     * Delete program by id
     * @param {Number} id ID of program **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Success} and HTTP response
     */
    this.deleteProgramByIdWithHttpInfo = function(id) {
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProgramById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Success;
      return this.apiClient.callApi(
        '/programs/{id}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete program by id
     * Delete program by id
     * @param {Number} id ID of program **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Success}
     */
    this.deleteProgramById = function(id) {
      return this.deleteProgramByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get program by id
     * Get program by id
     * @param {Number} id ID of Program **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProgramResult} and HTTP response
     */
    this.getProgramByIdWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramById");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        '_external_station_id': opts['externalStationId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ProgramResult;
      return this.apiClient.callApi(
        '/programs/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get program by id
     * Get program by id
     * @param {Number} id ID of Program **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProgramResult}
     */
    this.getProgramById = function(id, opts) {
      return this.getProgramByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all programs.
     * List all programs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page *(Optional)*
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Number} opts.tagId Search on Tag ID *(Optional)* `(Relation)`
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)* `(Relation)`
     * @param {Number} opts.genreId Search on Genre ID *(Optional)*
     * @param {Number} opts.blockId Search on Block ID *(Optional)* `(Relation)`
     * @param {Number} opts.itemId Search on Item ID *(Optional)* `(Relation)`
     * @param {Number} opts.disabled Search on Disabled status *(Optional)*
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProgramResults} and HTTP response
     */
    this.listProgramsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'broadcast_id': opts['broadcastId'],
        'model_type_id': opts['modelTypeId'],
        'tag_id': opts['tagId'],
        'presenter_id': opts['presenterId'],
        'genre_id': opts['genreId'],
        'block_id': opts['blockId'],
        'item_id': opts['itemId'],
        'disabled': opts['disabled'],
        'limit': opts['limit'],
        'order-by': opts['orderBy'],
        'order-direction': opts['orderDirection'],
        '_external_station_id': opts['externalStationId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = ProgramResults;
      return this.apiClient.callApi(
        '/programs', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all programs.
     * List all programs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Current page *(Optional)*
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Number} opts.tagId Search on Tag ID *(Optional)* `(Relation)`
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)* `(Relation)`
     * @param {Number} opts.genreId Search on Genre ID *(Optional)*
     * @param {Number} opts.blockId Search on Block ID *(Optional)* `(Relation)`
     * @param {Number} opts.itemId Search on Item ID *(Optional)* `(Relation)`
     * @param {Number} opts.disabled Search on Disabled status *(Optional)*
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProgramResults}
     */
    this.listPrograms = function(opts) {
      return this.listProgramsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update program by id
     * Update program by id
     * @param {Number} id ID of Program **(Required)**
     * @param {Object} opts Optional parameters
     * @param {module:models/ProgramDataInput} opts.data Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/Success} and HTTP response
     */
    this.updateProgramByIDWithHttpInfo = function(id, opts) {
      opts = opts || {};
      var postBody = opts['data'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProgramByID");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['API-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Success;
      return this.apiClient.callApi(
        '/programs/{id}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update program by id
     * Update program by id
     * @param {Number} id ID of Program **(Required)**
     * @param {Object} opts Optional parameters
     * @param {module:models/ProgramDataInput} opts.data Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/Success}
     */
    this.updateProgramByID = function(id, opts) {
      return this.updateProgramByIDWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
