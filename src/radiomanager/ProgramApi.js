/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse20011 from '../models/InlineResponse20011';
import InlineResponse2002 from '../models/InlineResponse2002';
import InlineResponse202 from '../models/InlineResponse202';
import InlineResponse400 from '../models/InlineResponse400';
import InlineResponse401 from '../models/InlineResponse401';
import InlineResponse403 from '../models/InlineResponse403';
import InlineResponse404 from '../models/InlineResponse404';
import InlineResponse422 from '../models/InlineResponse422';
import InlineResponse429 from '../models/InlineResponse429';
import InlineResponse500 from '../models/InlineResponse500';
import ProgramDataInput from '../models/ProgramDataInput';
import ProgramResult from '../models/ProgramResult';

/**
* Program service.
* @module radiomanager/ProgramApi
* @version 2.0
*/
export default class ProgramApi {

    /**
    * Constructs a new ProgramApi. 
    * @alias module:radiomanager/ProgramApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create program.
     * Create program.
     * @param {module:models/ProgramDataInput} programDataInput Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2002} and HTTP response
     */
    createProgramWithHttpInfo(programDataInput) {
      let postBody = programDataInput;
      // verify the required parameter 'programDataInput' is set
      if (programDataInput === undefined || programDataInput === null) {
        throw new Error("Missing the required parameter 'programDataInput' when calling createProgram");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/programs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create program.
     * Create program.
     * @param {module:models/ProgramDataInput} programDataInput Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2002}
     */
    createProgram(programDataInput) {
      return this.createProgramWithHttpInfo(programDataInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete program by id
     * Delete program by id
     * @param {Number} id ID of program **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse202} and HTTP response
     */
    deleteProgramByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProgramById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/programs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete program by id
     * Delete program by id
     * @param {Number} id ID of program **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse202}
     */
    deleteProgramById(id) {
      return this.deleteProgramByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get program by id
     * Get program by id
     * @param {Number} id ID of Program **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProgramResult} and HTTP response
     */
    getProgramByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProgramById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        '_external_station_id': opts['externalStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProgramResult;
      return this.apiClient.callApi(
        '/programs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get program by id
     * Get program by id
     * @param {Number} id ID of Program **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProgramResult}
     */
    getProgramById(id, opts) {
      return this.getProgramByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all programs.
     * List all programs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Number} opts.tagId Search on Tag ID *(Optional)* `(Relation)`
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)* `(Relation)`
     * @param {Number} opts.genreId Search on Genre ID *(Optional)*
     * @param {Number} opts.groupId Search on Group ID *(Optional)*
     * @param {Number} opts.blockId Search on Block ID *(Optional)* `(Relation)`
     * @param {Number} opts.itemId Search on Item ID *(Optional)* `(Relation)`
     * @param {Number} opts.disabled Search on Disabled status *(Optional)*
     * @param {Number} opts.page Current page *(Optional)* (default to 1)
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse20011} and HTTP response
     */
    listProgramsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'broadcast_id': opts['broadcastId'],
        'model_type_id': opts['modelTypeId'],
        'tag_id': opts['tagId'],
        'presenter_id': opts['presenterId'],
        'genre_id': opts['genreId'],
        'group_id': opts['groupId'],
        'block_id': opts['blockId'],
        'item_id': opts['itemId'],
        'disabled': opts['disabled'],
        'page': opts['page'],
        'limit': opts['limit'],
        'order-by': opts['orderBy'],
        'order-direction': opts['orderDirection'],
        '_external_station_id': opts['externalStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;
      return this.apiClient.callApi(
        '/programs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all programs.
     * List all programs.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Number} opts.tagId Search on Tag ID *(Optional)* `(Relation)`
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)* `(Relation)`
     * @param {Number} opts.genreId Search on Genre ID *(Optional)*
     * @param {Number} opts.groupId Search on Group ID *(Optional)*
     * @param {Number} opts.blockId Search on Block ID *(Optional)* `(Relation)`
     * @param {Number} opts.itemId Search on Item ID *(Optional)* `(Relation)`
     * @param {Number} opts.disabled Search on Disabled status *(Optional)*
     * @param {Number} opts.page Current page *(Optional)* (default to 1)
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse20011}
     */
    listPrograms(opts) {
      return this.listProgramsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update program by id
     * Update program by id
     * @param {Number} id ID of Program **(Required)**
     * @param {module:models/ProgramDataInput} programDataInput Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse202} and HTTP response
     */
    updateProgramByIDWithHttpInfo(id, programDataInput) {
      let postBody = programDataInput;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateProgramByID");
      }
      // verify the required parameter 'programDataInput' is set
      if (programDataInput === undefined || programDataInput === null) {
        throw new Error("Missing the required parameter 'programDataInput' when calling updateProgramByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/programs/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update program by id
     * Update program by id
     * @param {Number} id ID of Program **(Required)**
     * @param {module:models/ProgramDataInput} programDataInput Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse202}
     */
    updateProgramByID(id, programDataInput) {
      return this.updateProgramByIDWithHttpInfo(id, programDataInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
