/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BroadcastDataInput from '../models/BroadcastDataInput';
import BroadcastResult from '../models/BroadcastResult';
import EPGResults from '../models/EPGResults';
import InlineResponse2001 from '../models/InlineResponse2001';
import InlineResponse2002 from '../models/InlineResponse2002';
import InlineResponse2003 from '../models/InlineResponse2003';
import InlineResponse202 from '../models/InlineResponse202';
import InlineResponse400 from '../models/InlineResponse400';
import InlineResponse401 from '../models/InlineResponse401';
import InlineResponse403 from '../models/InlineResponse403';
import InlineResponse404 from '../models/InlineResponse404';
import InlineResponse422 from '../models/InlineResponse422';
import InlineResponse429 from '../models/InlineResponse429';
import InlineResponse500 from '../models/InlineResponse500';

/**
* Broadcast service.
* @module radiomanager/BroadcastApi
* @version 2.0
*/
export default class BroadcastApi {

    /**
    * Constructs a new BroadcastApi. 
    * @alias module:radiomanager/BroadcastApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create broadcast.
     * Create broadcast.
     * @param {module:models/BroadcastDataInput} broadcastDataInput Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2002} and HTTP response
     */
    createBroadcastWithHttpInfo(broadcastDataInput) {
      let postBody = broadcastDataInput;
      // verify the required parameter 'broadcastDataInput' is set
      if (broadcastDataInput === undefined || broadcastDataInput === null) {
        throw new Error("Missing the required parameter 'broadcastDataInput' when calling createBroadcast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/broadcasts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create broadcast.
     * Create broadcast.
     * @param {module:models/BroadcastDataInput} broadcastDataInput Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2002}
     */
    createBroadcast(broadcastDataInput) {
      return this.createBroadcastWithHttpInfo(broadcastDataInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete broadcast by id
     * Delete broadcast by id
     * @param {Number} id ID of Broadcast **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse202} and HTTP response
     */
    deleteBroadcastByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteBroadcastById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/broadcasts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete broadcast by id
     * Delete broadcast by id
     * @param {Number} id ID of Broadcast **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse202}
     */
    deleteBroadcastById(id) {
      return this.deleteBroadcastByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get broadcast by id
     * Get broadcast by id
     * @param {Number} id ID of Broadcast **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/BroadcastResult} and HTTP response
     */
    getBroadcastByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getBroadcastById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        '_external_station_id': opts['externalStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BroadcastResult;
      return this.apiClient.callApi(
        '/broadcasts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get broadcast by id
     * Get broadcast by id
     * @param {Number} id ID of Broadcast **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/BroadcastResult}
     */
    getBroadcastById(id, opts) {
      return this.getBroadcastByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current Broadcast
     * Get currently playing Broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/BroadcastResult} and HTTP response
     */
    getCurrentBroadcastWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'withunpublished': opts['withunpublished']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BroadcastResult;
      return this.apiClient.callApi(
        '/broadcasts/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get current Broadcast
     * Get currently playing Broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/BroadcastResult}
     */
    getCurrentBroadcast(opts) {
      return this.getCurrentBroadcastWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get daily EPG
     * Get a list of broadcasts as Programming guide for 1 day
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date Date *(Optional)*
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/EPGResults} and HTTP response
     */
    getDailyEPGWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'withunpublished': opts['withunpublished']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EPGResults;
      return this.apiClient.callApi(
        '/broadcasts/epg/daily', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get daily EPG
     * Get a list of broadcasts as Programming guide for 1 day
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date Date *(Optional)*
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/EPGResults}
     */
    getDailyEPG(opts) {
      return this.getDailyEPGWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get EPG by date
     * Get a list of broadcasts as Programming guide, seperated per day
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date Date *(Optional)*
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/EPGResults} and HTTP response
     */
    getEPGByDateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'withunpublished': opts['withunpublished']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EPGResults;
      return this.apiClient.callApi(
        '/broadcasts/epg', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get EPG by date
     * Get a list of broadcasts as Programming guide, seperated per day
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date Date *(Optional)*
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/EPGResults}
     */
    getEPGByDate(opts) {
      return this.getEPGByDateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get next Broadcast
     * Get currently upcoming Broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/BroadcastResult} and HTTP response
     */
    getNextBroadcastWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'withunpublished': opts['withunpublished']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BroadcastResult;
      return this.apiClient.callApi(
        '/broadcasts/next', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get next Broadcast
     * Get currently upcoming Broadcast
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/BroadcastResult}
     */
    getNextBroadcast(opts) {
      return this.getNextBroadcastWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get weekly EPG
     * Get a list of broadcasts as Programming guide for 7 days, seperated per day
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date Date *(Optional)*
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/EPGResults} and HTTP response
     */
    getWeeklyEPGWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date'],
        'withunpublished': opts['withunpublished']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EPGResults;
      return this.apiClient.callApi(
        '/broadcasts/epg/weekly', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get weekly EPG
     * Get a list of broadcasts as Programming guide for 7 days, seperated per day
     * @param {Object} opts Optional parameters
     * @param {Date} opts.date Date *(Optional)*
     * @param {Boolean} opts.withunpublished Show Unpublished *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/EPGResults}
     */
    getWeeklyEPG(opts) {
      return this.getWeeklyEPGWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all broadcasts.
     * List all broadcasts.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.programId Search on Program ID *(Optional)* `(Relation)`
     * @param {Number} opts.blockId Search on Block ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Number} opts.tagId Search on Tag ID *(Optional)* `(Relation)`
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)* `(Relation)`
     * @param {Number} opts.genreId Search on Genre ID *(Optional)* `(Relation)`
     * @param {Number} opts.groupId Search on Group ID *(Optional)* `(Relation)`
     * @param {Number} opts.itemId Search on Item ID *(Optional)* `(Relation)`
     * @param {Number} opts.plannedInEpg Checks if item is in EPG *(Optional)*
     * @param {Date} opts.startMin Minimum start date *(Optional)*
     * @param {Date} opts.startMax Maximum start date *(Optional)*
     * @param {Number} opts.page Current page *(Optional)* (default to 1)
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2001} and HTTP response
     */
    listBroadcastsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'program_id': opts['programId'],
        'block_id': opts['blockId'],
        'model_type_id': opts['modelTypeId'],
        'tag_id': opts['tagId'],
        'presenter_id': opts['presenterId'],
        'genre_id': opts['genreId'],
        'group_id': opts['groupId'],
        'item_id': opts['itemId'],
        'planned_in_epg': opts['plannedInEpg'],
        'start-min': opts['startMin'],
        'start-max': opts['startMax'],
        'page': opts['page'],
        'limit': opts['limit'],
        'order-by': opts['orderBy'],
        'order-direction': opts['orderDirection'],
        '_external_station_id': opts['externalStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/broadcasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all broadcasts.
     * List all broadcasts.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.programId Search on Program ID *(Optional)* `(Relation)`
     * @param {Number} opts.blockId Search on Block ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Number} opts.tagId Search on Tag ID *(Optional)* `(Relation)`
     * @param {Number} opts.presenterId Search on Presenter ID *(Optional)* `(Relation)`
     * @param {Number} opts.genreId Search on Genre ID *(Optional)* `(Relation)`
     * @param {Number} opts.groupId Search on Group ID *(Optional)* `(Relation)`
     * @param {Number} opts.itemId Search on Item ID *(Optional)* `(Relation)`
     * @param {Number} opts.plannedInEpg Checks if item is in EPG *(Optional)*
     * @param {Date} opts.startMin Minimum start date *(Optional)*
     * @param {Date} opts.startMax Maximum start date *(Optional)*
     * @param {Number} opts.page Current page *(Optional)* (default to 1)
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2001}
     */
    listBroadcasts(opts) {
      return this.listBroadcastsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Print broadcast by id with template
     * Download a rundown in printable format as HTML inside the JSON repsonse
     * @param {Number} id ID of Broadcast **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.templateId The print template to be used *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2003} and HTTP response
     */
    printBroadcastByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling printBroadcastById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'template_id': opts['templateId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;
      return this.apiClient.callApi(
        '/broadcasts/print/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Print broadcast by id with template
     * Download a rundown in printable format as HTML inside the JSON repsonse
     * @param {Number} id ID of Broadcast **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.templateId The print template to be used *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2003}
     */
    printBroadcastById(id, opts) {
      return this.printBroadcastByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update broadcast by id
     * Update broadcast by id
     * @param {Number} id ID of Broadcast **(Required)**
     * @param {Object} opts Optional parameters
     * @param {module:models/BroadcastDataInput} opts.broadcastDataInput Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse202} and HTTP response
     */
    updateBroadcastByIDWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = opts['broadcastDataInput'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateBroadcastByID");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/broadcasts/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update broadcast by id
     * Update broadcast by id
     * @param {Number} id ID of Broadcast **(Required)**
     * @param {Object} opts Optional parameters
     * @param {module:models/BroadcastDataInput} opts.broadcastDataInput Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse202}
     */
    updateBroadcastByID(id, opts) {
      return this.updateBroadcastByIDWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
