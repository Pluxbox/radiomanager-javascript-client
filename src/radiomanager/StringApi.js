/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse400 from '../models/InlineResponse400';
import InlineResponse401 from '../models/InlineResponse401';
import InlineResponse404 from '../models/InlineResponse404';
import InlineResponse422 from '../models/InlineResponse422';
import InlineResponse429 from '../models/InlineResponse429';
import InlineResponse500 from '../models/InlineResponse500';
import TextString from '../models/TextString';

/**
* String service.
* @module radiomanager/StringApi
* @version 2.0
*/
export default class StringApi {

    /**
    * Constructs a new StringApi. 
    * @alias module:radiomanager/StringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Strings (formatted)
     * Get RadioText/DAB String for publication based on String Templates
     * @param {String} name Name of String Template **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fullModel Full model or content only **(Optional)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/TextString} and HTTP response
     */
    getStringsByNameWithHttpInfo(name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getStringsByName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'full_model': opts['fullModel']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TextString;
      return this.apiClient.callApi(
        '/strings/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Strings (formatted)
     * Get RadioText/DAB String for publication based on String Templates
     * @param {String} name Name of String Template **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.fullModel Full model or content only **(Optional)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/TextString}
     */
    getStringsByName(name, opts) {
      return this.getStringsByNameWithHttpInfo(name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
