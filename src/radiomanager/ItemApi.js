/**
 * RadioManager
 * This OpenAPI 3 Document describes the functionality of the API v2 of RadioManager. Note that no rights can be derived from this Document and the true functionality of the API might differ.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@pluxbox.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ImportItem from '../models/ImportItem';
import InlineResponse2002 from '../models/InlineResponse2002';
import InlineResponse2008 from '../models/InlineResponse2008';
import InlineResponse202 from '../models/InlineResponse202';
import InlineResponse2021 from '../models/InlineResponse2021';
import InlineResponse400 from '../models/InlineResponse400';
import InlineResponse401 from '../models/InlineResponse401';
import InlineResponse403 from '../models/InlineResponse403';
import InlineResponse404 from '../models/InlineResponse404';
import InlineResponse422 from '../models/InlineResponse422';
import InlineResponse429 from '../models/InlineResponse429';
import InlineResponse500 from '../models/InlineResponse500';
import ItemDataInput from '../models/ItemDataInput';
import ItemResult from '../models/ItemResult';
import ItemsStopcurrentBody from '../models/ItemsStopcurrentBody';
import PlaylistMergeBody from '../models/PlaylistMergeBody';
import PlaylistStructureBody from '../models/PlaylistStructureBody';
import PlaylistTimingBody from '../models/PlaylistTimingBody';

/**
* Item service.
* @module radiomanager/ItemApi
* @version 2.0
*/
export default class ItemApi {

    /**
    * Constructs a new ItemApi. 
    * @alias module:radiomanager/ItemApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create an new item.
     * Create item.
     * @param {module:models/ItemDataInput} itemDataInput Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2002} and HTTP response
     */
    createItemWithHttpInfo(itemDataInput) {
      let postBody = itemDataInput;
      // verify the required parameter 'itemDataInput' is set
      if (itemDataInput === undefined || itemDataInput === null) {
        throw new Error("Missing the required parameter 'itemDataInput' when calling createItem");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;
      return this.apiClient.callApi(
        '/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create an new item.
     * Create item.
     * @param {module:models/ItemDataInput} itemDataInput Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2002}
     */
    createItem(itemDataInput) {
      return this.createItemWithHttpInfo(itemDataInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post a current playing item, keep structure
     * Post current playing Item. Can be existing Item referenced by external_id. When Items are moved, this function **will attempt to** keep Items' ModelType structure in rundown.
     * @param {module:models/ImportItem} importItem Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ItemResult} and HTTP response
     */
    currentItemPostStructureWithHttpInfo(importItem) {
      let postBody = importItem;
      // verify the required parameter 'importItem' is set
      if (importItem === undefined || importItem === null) {
        throw new Error("Missing the required parameter 'importItem' when calling currentItemPostStructure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemResult;
      return this.apiClient.callApi(
        '/items/current/structure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post a current playing item, keep structure
     * Post current playing Item. Can be existing Item referenced by external_id. When Items are moved, this function **will attempt to** keep Items' ModelType structure in rundown.
     * @param {module:models/ImportItem} importItem Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ItemResult}
     */
    currentItemPostStructure(importItem) {
      return this.currentItemPostStructureWithHttpInfo(importItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post current playing Item
     * Post current playing Item. Can be existing Item referenced by external_id. When Items are moved, this function **will not keep** Items' ModelType structure in rundown.
     * @param {module:models/ImportItem} importItem Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ItemResult} and HTTP response
     */
    currentItemPostTimingWithHttpInfo(importItem) {
      let postBody = importItem;
      // verify the required parameter 'importItem' is set
      if (importItem === undefined || importItem === null) {
        throw new Error("Missing the required parameter 'importItem' when calling currentItemPostTiming");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ItemResult;
      return this.apiClient.callApi(
        '/items/current/timing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post current playing Item
     * Post current playing Item. Can be existing Item referenced by external_id. When Items are moved, this function **will not keep** Items' ModelType structure in rundown.
     * @param {module:models/ImportItem} importItem Data **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ItemResult}
     */
    currentItemPostTiming(importItem) {
      return this.currentItemPostTimingWithHttpInfo(importItem)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete item by ID.
     * Delete item by id.
     * @param {Number} id ID of Item **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteItemByIdWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteItemById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/items/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete item by ID.
     * Delete item by id.
     * @param {Number} id ID of Item **(Required)**
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteItemById(id) {
      return this.deleteItemByIdWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get current Item
     * Get current Item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.lastplayed Show last played item if there is no current item*(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ItemResult} and HTTP response
     */
    getCurrentItemWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'lastplayed': opts['lastplayed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemResult;
      return this.apiClient.callApi(
        '/items/current', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get current Item
     * Get current Item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.lastplayed Show last played item if there is no current item*(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ItemResult}
     */
    getCurrentItem(opts) {
      return this.getCurrentItemWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get extended item details by ID.
     * Read item by id.
     * @param {Number} id ID of Item **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ItemResult} and HTTP response
     */
    getItemByIdWithHttpInfo(id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getItemById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        '_external_station_id': opts['externalStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ItemResult;
      return this.apiClient.callApi(
        '/items/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get extended item details by ID.
     * Read item by id.
     * @param {Number} id ID of Item **(Required)**
     * @param {Object} opts Optional parameters
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ItemResult}
     */
    getItemById(id, opts) {
      return this.getItemByIdWithHttpInfo(id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of all the items currently in your station.
     * Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.blockId Search on Block ID *(Optional)* `(Relation)`
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Number} opts.tagId Search on Tag ID *(Optional)* `(Relation)`
     * @param {Number} opts.campaignId Search on Campaign ID *(Optional)* `(Relation)`
     * @param {Number} opts.contactId Search on Contact ID *(Optional)* `(Relation)`
     * @param {Number} opts.programDraftId Search on Program Draft ID *(Optional)*
     * @param {Number} opts.userDraftId Search on User Draft ID *(Optional)*
     * @param {Number} opts.stationDraftId Search on Station Draft ID *(Optional)*
     * @param {Number} opts.programId Search on Program ID *(Optional)* `(Relation)`
     * @param {String} opts.externalId Search on External ID *(Optional)*
     * @param {Number} opts.durationMin Minimum duration (seconds) *(Optional)*
     * @param {Number} opts.durationMax Maximum duration (seconds) *(Optional)*
     * @param {module:models/String} opts.status Play Status of item *(Optional)*
     * @param {Date} opts.startMin Minimum start date *(Optional)*
     * @param {Date} opts.startMax Maximum start date *(Optional)*
     * @param {Number} opts.page Current page *(Optional)* (default to 1)
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2008} and HTTP response
     */
    listItemsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'block_id': opts['blockId'],
        'broadcast_id': opts['broadcastId'],
        'model_type_id': opts['modelTypeId'],
        'tag_id': opts['tagId'],
        'campaign_id': opts['campaignId'],
        'contact_id': opts['contactId'],
        'program_draft_id': opts['programDraftId'],
        'user_draft_id': opts['userDraftId'],
        'station_draft_id': opts['stationDraftId'],
        'program_id': opts['programId'],
        'external_id': opts['externalId'],
        'duration-min': opts['durationMin'],
        'duration-max': opts['durationMax'],
        'status': opts['status'],
        'start-min': opts['startMin'],
        'start-max': opts['startMax'],
        'page': opts['page'],
        'limit': opts['limit'],
        'order-by': opts['orderBy'],
        'order-direction': opts['orderDirection'],
        '_external_station_id': opts['externalStationId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;
      return this.apiClient.callApi(
        '/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of all the items currently in your station.
     * Get a list of all the items currently in your station. This feature supports pagination and will give a maximum results of 50 items back.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.blockId Search on Block ID *(Optional)* `(Relation)`
     * @param {Number} opts.broadcastId Search on Broadcast ID *(Optional)* `(Relation)`
     * @param {Number} opts.modelTypeId Search on ModelType ID *(Optional)* `(Relation)`
     * @param {Number} opts.tagId Search on Tag ID *(Optional)* `(Relation)`
     * @param {Number} opts.campaignId Search on Campaign ID *(Optional)* `(Relation)`
     * @param {Number} opts.contactId Search on Contact ID *(Optional)* `(Relation)`
     * @param {Number} opts.programDraftId Search on Program Draft ID *(Optional)*
     * @param {Number} opts.userDraftId Search on User Draft ID *(Optional)*
     * @param {Number} opts.stationDraftId Search on Station Draft ID *(Optional)*
     * @param {Number} opts.programId Search on Program ID *(Optional)* `(Relation)`
     * @param {String} opts.externalId Search on External ID *(Optional)*
     * @param {Number} opts.durationMin Minimum duration (seconds) *(Optional)*
     * @param {Number} opts.durationMax Maximum duration (seconds) *(Optional)*
     * @param {module:models/String} opts.status Play Status of item *(Optional)*
     * @param {Date} opts.startMin Minimum start date *(Optional)*
     * @param {Date} opts.startMax Maximum start date *(Optional)*
     * @param {Number} opts.page Current page *(Optional)* (default to 1)
     * @param {Number} opts.limit Results per page *(Optional)*
     * @param {String} opts.orderBy Field to order the results *(Optional)*
     * @param {module:models/String} opts.orderDirection Direction of ordering *(Optional)*
     * @param {Number} opts.externalStationId Query on a different (content providing) station *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2008}
     */
    listItems(opts) {
      return this.listItemsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post a playlist, do not remove previously imported items
     * Post a playlist with 'keep structure' method, but do not remove previously imported items
     * @param {module:models/PlaylistMergeBody} playlistMergeBody Data *(Required)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2021} and HTTP response
     */
    playlistPostMergeWithHttpInfo(playlistMergeBody) {
      let postBody = playlistMergeBody;
      // verify the required parameter 'playlistMergeBody' is set
      if (playlistMergeBody === undefined || playlistMergeBody === null) {
        throw new Error("Missing the required parameter 'playlistMergeBody' when calling playlistPostMerge");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2021;
      return this.apiClient.callApi(
        '/items/playlist/merge', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post a playlist, do not remove previously imported items
     * Post a playlist with 'keep structure' method, but do not remove previously imported items
     * @param {module:models/PlaylistMergeBody} playlistMergeBody Data *(Required)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2021}
     */
    playlistPostMerge(playlistMergeBody) {
      return this.playlistPostMergeWithHttpInfo(playlistMergeBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post a playlist, keep current structure
     * Post a playlist for a block. Existing Items can referenced by external_id. When Items are moved, this function **will attempt to** keep Items' ModelType structure in rundown.
     * @param {module:models/PlaylistStructureBody} playlistStructureBody Data *(Required)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2021} and HTTP response
     */
    playlistPostStructureWithHttpInfo(playlistStructureBody) {
      let postBody = playlistStructureBody;
      // verify the required parameter 'playlistStructureBody' is set
      if (playlistStructureBody === undefined || playlistStructureBody === null) {
        throw new Error("Missing the required parameter 'playlistStructureBody' when calling playlistPostStructure");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2021;
      return this.apiClient.callApi(
        '/items/playlist/structure', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post a playlist, keep current structure
     * Post a playlist for a block. Existing Items can referenced by external_id. When Items are moved, this function **will attempt to** keep Items' ModelType structure in rundown.
     * @param {module:models/PlaylistStructureBody} playlistStructureBody Data *(Required)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2021}
     */
    playlistPostStructure(playlistStructureBody) {
      return this.playlistPostStructureWithHttpInfo(playlistStructureBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Post a playlist
     * Post a playlist for a block. Existing Items can referenced by external_id. When Items are moved, this function **will not** keep Items' ModelType structure in rundown.
     * @param {module:models/PlaylistTimingBody} playlistTimingBody Data *(Required)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse2021} and HTTP response
     */
    playlistPostTimingWithHttpInfo(playlistTimingBody) {
      let postBody = playlistTimingBody;
      // verify the required parameter 'playlistTimingBody' is set
      if (playlistTimingBody === undefined || playlistTimingBody === null) {
        throw new Error("Missing the required parameter 'playlistTimingBody' when calling playlistPostTiming");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2021;
      return this.apiClient.callApi(
        '/items/playlist/timing', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Post a playlist
     * Post a playlist for a block. Existing Items can referenced by external_id. When Items are moved, this function **will not** keep Items' ModelType structure in rundown.
     * @param {module:models/PlaylistTimingBody} playlistTimingBody Data *(Required)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse2021}
     */
    playlistPostTiming(playlistTimingBody) {
      return this.playlistPostTimingWithHttpInfo(playlistTimingBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Stop an Item
     * Set a current playing or specific item on played
     * @param {Object} opts Optional parameters
     * @param {module:models/ItemsStopcurrentBody} opts.itemsStopcurrentBody Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse202} and HTTP response
     */
    stopCurrentItemWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['itemsStopcurrentBody'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/items/stopcurrent', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Stop an Item
     * Set a current playing or specific item on played
     * @param {Object} opts Optional parameters
     * @param {module:models/ItemsStopcurrentBody} opts.itemsStopcurrentBody Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse202}
     */
    stopCurrentItem(opts) {
      return this.stopCurrentItemWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update extended item details by ID.
     * Update item by id.
     * @param {Number} id ID of Item **(Required)**
     * @param {module:models/ItemDataInput} itemDataInput Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/InlineResponse202} and HTTP response
     */
    updateItemByIdWithHttpInfo(id, itemDataInput) {
      let postBody = itemDataInput;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateItemById");
      }
      // verify the required parameter 'itemDataInput' is set
      if (itemDataInput === undefined || itemDataInput === null) {
        throw new Error("Missing the required parameter 'itemDataInput' when calling updateItemById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API-Key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse202;
      return this.apiClient.callApi(
        '/items/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update extended item details by ID.
     * Update item by id.
     * @param {Number} id ID of Item **(Required)**
     * @param {module:models/ItemDataInput} itemDataInput Data *(Optional)*
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/InlineResponse202}
     */
    updateItemById(id, itemDataInput) {
      return this.updateItemByIdWithHttpInfo(id, itemDataInput)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
